"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _Radio = _interopRequireDefault(require("../src/Radio"));

describe('Radio', function () {
  it('should not crash when rendering', function () {
    expect(function () {
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], null));
    }).not.toThrowError();
  });
  it('should render the component', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      "data-testid": "test-id-radio"
    }));
    expect(_react2.screen.getByTestId('test-id-radio')).toBeVisible();
  });
  it('should render with an id when id is specified', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      id: "test-123"
    }));
    expect(_react2.screen.getByRole('radio').getAttribute('id')).toEqual('test-123');
  });
  it('should render with a name when name is specified', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      name: "test-name"
    }));
    expect(_react2.screen.getByRole('radio').getAttribute('name')).toEqual('test-name');
  });
  it('should render with a label when label is specified', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      label: "Select"
    }));
    expect(_react2.screen.getByLabelText('Select')).toBeInTheDocument();
  });
  it('should render with a value when value is specified', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      value: "test-value"
    }));
    expect(_react2.screen.getByRole('radio').getAttribute('value')).toEqual('test-value');
  });
  it('should render a disabled state when disabled is true', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      disabled: true
    }));
    expect(_react2.screen.getByRole('radio')).toBeDisabled();
  });
  it('should render a checked state when checked is true', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      checked: true
    }));
    expect(_react2.screen.getByRole('radio')).toBeChecked();
  });
  it('should render a required state when isRequired is true', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      isRequired: true
    }));
    expect(_react2.screen.getByRole('radio').required).toBeTruthy();
  });
  it('should render an invalid state when isInvalid is true', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      isInvalid: true
    }));
    expect(_react2.screen.getByRole('radio')).toBeInvalid();
  });
  it('should render a checked state when the radio is clicked', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], null));

    var radio = _react2.screen.getByRole('radio');

    expect(_react2.screen.getByRole('radio')).not.toBeChecked();

    _react2.fireEvent.click(radio);

    expect(_react2.screen.getByRole('radio')).toBeChecked();
  });
  it('should handle state change when onChange is specified', function () {
    var onChangeMock = jest.fn();
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Radio["default"], {
      onChange: onChangeMock
    }));

    var radio = _react2.screen.getByRole('radio');

    expect(onChangeMock).toBeCalledTimes(0);

    _react2.fireEvent.click(radio);

    expect(onChangeMock).toBeCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yYWRpby9fX3Rlc3RzX18vUmFkaW8udGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwiZXhwZWN0Iiwibm90IiwidG9UaHJvd0Vycm9yIiwic2NyZWVuIiwiZ2V0QnlUZXN0SWQiLCJ0b0JlVmlzaWJsZSIsImdldEJ5Um9sZSIsImdldEF0dHJpYnV0ZSIsInRvRXF1YWwiLCJnZXRCeUxhYmVsVGV4dCIsInRvQmVJblRoZURvY3VtZW50IiwidG9CZURpc2FibGVkIiwidG9CZUNoZWNrZWQiLCJyZXF1aXJlZCIsInRvQmVUcnV0aHkiLCJ0b0JlSW52YWxpZCIsInJhZGlvIiwiZmlyZUV2ZW50IiwiY2xpY2siLCJvbkNoYW5nZU1vY2siLCJqZXN0IiwiZm4iLCJ0b0JlQ2FsbGVkVGltZXMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQUEsUUFBUSxDQUFDLE9BQUQsRUFBVSxZQUFNO0FBQ3RCQyxFQUFBQSxFQUFFLENBQUMsaUNBQUQsRUFBb0MsWUFBTTtBQUMxQ0MsSUFBQUEsTUFBTSxDQUFDLFlBQU07QUFDWCx3Q0FBTyxnQ0FBQyxpQkFBRCxPQUFQO0FBQ0QsS0FGSyxDQUFOLENBRUdDLEdBRkgsQ0FFT0MsWUFGUDtBQUdELEdBSkMsQ0FBRjtBQU1BSCxFQUFBQSxFQUFFLENBQUMsNkJBQUQsRUFBZ0MsWUFBTTtBQUN0QyxzQ0FBTyxnQ0FBQyxpQkFBRDtBQUFPLHFCQUFZO0FBQW5CLE1BQVA7QUFDQUMsSUFBQUEsTUFBTSxDQUFDRyxlQUFPQyxXQUFQLENBQW1CLGVBQW5CLENBQUQsQ0FBTixDQUE0Q0MsV0FBNUM7QUFDRCxHQUhDLENBQUY7QUFLQU4sRUFBQUEsRUFBRSxDQUFDLCtDQUFELEVBQWtELFlBQU07QUFDeEQsc0NBQU8sZ0NBQUMsaUJBQUQ7QUFBTyxNQUFBLEVBQUUsRUFBQztBQUFWLE1BQVA7QUFDQUMsSUFBQUEsTUFBTSxDQUFDRyxlQUFPRyxTQUFQLENBQWlCLE9BQWpCLEVB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LGlCQUFEO0FBQU8sTUFBQSxRQUFRLEVBQUVGO0FBQWpCLE1BQVA7O0FBRUEsUUFBTUgsS0FBSyxHQUFHYixlQUFPRyxTQUFQLENBQWlCLE9BQWpCLENBQWQ7O0FBQ0FOLElBQUFBLE1BQU0sQ0FBQ21CLFlBQUQsQ0FBTixDQUFxQkcsZUFBckIsQ0FBcUMsQ0FBckM7O0FBQ0FMLHNCQUFVQyxLQUFWLENBQWdCRixLQUFoQjs7QUFDQWhCLElBQUFBLE1BQU0sQ0FBQ21CLFlBQUQsQ0FBTixDQUFxQkcsZUFBckIsQ0FBcUMsQ0FBckM7QUFDRCxHQVJDLENBQUY7QUFTRCxDQXJFTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5pbXBvcnQgUmFkaW8gZnJvbSAnLi4vc3JjL1JhZGlvJ1xuXG5kZXNjcmliZSgnUmFkaW8nLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgbm90IGNyYXNoIHdoZW4gcmVuZGVyaW5nJywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICByZW5kZXIoPFJhZGlvIC8+KVxuICAgIH0pLm5vdC50b1Rocm93RXJyb3IoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHRoZSBjb21wb25lbnQnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxSYWRpbyBkYXRhLXRlc3RpZD1cInRlc3QtaWQtcmFkaW9cIiAvPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCd0ZXN0LWlkLXJhZGlvJykpLnRvQmVWaXNpYmxlKClcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJlbmRlciB3aXRoIGFuIGlkIHdoZW4gaWQgaXMgc3BlY2lmaWVkJywgKCkgPT4ge1xuICAgIHJlbmRlcig8UmFkaW8gaWQ9XCJ0ZXN0LTEyM1wiIC8+KVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdyYWRpbycpLmdldEF0dHJpYnV0ZSgnaWQnKSkudG9FcXVhbCgndGVzdC0xMjMnKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHdpdGggYSBuYW1lIHdoZW4gbmFtZSBpcyBzcGVjaWZpZWQnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxSYWRpbyBuYW1lPVwidGVzdC1uYW1lXCIgLz4pXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ3JhZGlvJykuZ2V0QXR0cmlidXRlKCduYW1lJykpLnRvRXF1YWwoJ3Rlc3QtbmFtZScpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgd2l0aCBhIGxhYmVsIHdoZW4gbGFiZWwgaXMgc3BlY2lmaWVkJywgKCkgPT4ge1xuICAgIHJlbmRlcig8UmFkaW8gbGFiZWw9XCJTZWxlY3RcIiAvPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5TGFiZWxUZXh0KCdTZWxlY3QnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHdpdGggYSB2YWx1ZSB3aGVuIHZhbHVlIGlzIHNwZWNpZmllZCcsICgpID0+IHtcbiAgICByZW5kZXIoPFJhZGlvIHZhbHVlPVwidGVzdC12YWx1ZVwiIC8+KVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdyYWRpbycpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgndGVzdC12YWx1ZScpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYSBkaXNhYmxlZCBzdGF0ZSB3aGVuIGRpc2FibGVkIGlzIHRydWUnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxSYWRpbyBkaXNhYmxlZCAvPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgncmFkaW8nKSkudG9CZURpc2FibGVkKClcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJlbmRlciBhIGNoZWNrZWQgc3RhdGUgd2hlbiBjaGVja2VkIGlzIHRydWUnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxSYWRpbyBjaGVja2VkIC8+KVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdyYWRpbycpKS50b0JlQ2hlY2tlZCgpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYSByZXF1aXJlZCBzdGF0ZSB3aGVuIGlzUmVxdWlyZWQgaXMgdHJ1ZScsICgpID0+IHtcbiAgICByZW5kZXIoPFJhZGlvIGlzUmVxdWlyZWQgLz4pXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ3JhZGlvJykucmVxdWlyZWQpLnRvQmVUcnV0aHkoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGFuIGludmFsaWQgc3RhdGUgd2hlbiBpc0ludmFsaWQgaXMgdHJ1ZScsICgpID0+IHtcbiAgICByZW5kZXIoPFJhZGlvIGlzSW52YWxpZCAvPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgncmFkaW8nKSkudG9CZUludmFsaWQoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGEgY2hlY2tlZCBzdGF0ZSB3aGVuIHRoZSByYWRpbyBpcyBjbGlja2VkJywgKCkgPT4ge1xuICAgIHJlbmRlcig8UmFkaW8gLz4pXG4gICAgY29uc3QgcmFkaW8gPSBzY3JlZW4uZ2V0QnlSb2xlKCdyYWRpbycpXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ3JhZGlvJykpLm5vdC50b0JlQ2hlY2tlZCgpXG4gICAgZmlyZUV2ZW50LmNsaWNrKHJhZGlvKVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdyYWRpbycpKS50b0JlQ2hlY2tlZCgpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgc3RhdGUgY2hhbmdlIHdoZW4gb25DaGFuZ2UgaXMgc3BlY2lmaWVkJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uQ2hhbmdlTW9jayA9IGplc3QuZm4oKVxuICAgIHJlbmRlcig8UmFkaW8gb25DaGFuZ2U9e29uQ2hhbmdlTW9ja30gLz4pXG5cbiAgICBjb25zdCByYWRpbyA9IHNjcmVlbi5nZXRCeVJvbGUoJ3JhZGlvJylcbiAgICBleHBlY3Qob25DaGFuZ2VNb2NrKS50b0JlQ2FsbGVkVGltZXMoMClcbiAgICBmaXJlRXZlbnQuY2xpY2socmFkaW8pXG4gICAgZXhwZWN0KG9uQ2hhbmdlTW9jaykudG9CZUNhbGxlZFRpbWVzKDEpXG4gIH0pXG59KVxuIl19