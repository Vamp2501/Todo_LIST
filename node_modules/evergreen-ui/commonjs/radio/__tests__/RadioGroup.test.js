"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _RadioGroup = _interopRequireDefault(require("../src/RadioGroup"));

describe('Radio Group', function () {
  var options = [{
    label: 'Read-only',
    value: 'read-only'
  }, {
    label: 'Write',
    value: 'write',
    isDisabled: true
  }, {
    label: 'Restricted',
    value: 'restricted'
  }];
  it('should not crash when rendering', function () {
    expect(function () {
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_RadioGroup["default"], {
        options: options
      }));
    }).not.toThrowError();
  });
  it('should render the radio options with the options specified', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_RadioGroup["default"], {
      options: options
    }));
    expect(_react2.screen.getByRole('group')).toBeVisible();
    expect(_react2.screen.getAllByRole('radio')).toHaveLength(3);
  });
  it('should show group label when label is specified', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_RadioGroup["default"], {
      options: options,
      label: "Permissions"
    }));
    expect(_react2.screen.getByRole('group').getAttribute('aria-label')).toEqual('Permissions');
    expect(_react2.screen.getByLabelText('Permissions')).toBeVisible();
  });
  it('should have all options in required states when isRequired is true', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_RadioGroup["default"], {
      options: options,
      isRequired: true
    }));

    _react2.screen.getAllByRole('radio').forEach(function (element) {
      expect(element).toBeRequired();
    });
  });
  it('should select the option that has the same value specified', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_RadioGroup["default"], {
      options: options,
      value: "write"
    }));
    expect(_react2.screen.getByRole('radio', {
      name: 'Write'
    })).toBeChecked();
  });
  it('should handle state change when onChange is specified', function () {
    var onChangeMock = jest.fn();
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_RadioGroup["default"], {
      options: options,
      value: "read-only",
      onChange: onChangeMock
    }));

    var radio = _react2.screen.getByRole('radio', {
      name: 'Restricted'
    });

    expect(onChangeMock).toBeCalledTimes(0);

    _react2.fireEvent.click(radio);

    expect(onChangeMock).toBeCalledTimes(1);
  }); // untested props: defaultValue, size
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yYWRpby9fX3Rlc3RzX18vUmFkaW9Hcm91cC50ZXN0LmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwib3B0aW9ucyIsImxhYmVsIiwidmFsdWUiLCJpc0Rpc2FibGVkIiwiaXQiLCJleHBlY3QiLCJub3QiLCJ0b1Rocm93RXJyb3IiLCJzY3JlZW4iLCJnZXRCeVJvbGUiLCJ0b0JlVmlzaWJsZSIsImdldEFsbEJ5Um9sZSIsInRvSGF2ZUxlbmd0aCIsImdldEF0dHJpYnV0ZSIsInRvRXF1YWwiLCJnZXRCeUxhYmVsVGV4dCIsImZvckVhY2giLCJlbGVtZW50IiwidG9CZVJlcXVpcmVkIiwibmFtZSIsInRvQmVDaGVja2VkIiwib25DaGFuZ2VNb2NrIiwiamVzdCIsImZuIiwicmFkaW8iLCJ0b0JlQ2FsbGVkVGltZXMiLCJmaXJlRXZlbnQiLCJjbGljayJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBQSxRQUFRLENBQUMsYUFBRCxFQUFnQixZQUFNO0FBQzVCLE1BQU1DLE9BQU8sR0FBRyxDQUNkO0FBQUVDLElBQUFBLEtBQUssRUFBRSxXQUFUO0FBQXNCQyxJQUFBQSxLQUFLLEVBQUU7QUFBN0IsR0FEYyxFQUVkO0FBQUVELElBQUFBLEtBQUssRUFBRSxPQUFUO0FBQWtCQyxJQUFBQSxLQUFLLEVBQUUsT0FBekI7QUFBa0NDLElBQUFBLFVBQVUsRUFBRTtBQUE5QyxHQUZjLEVBR2Q7QUFBRUYsSUFBQUEsS0FBSyxFQUFFLFlBQVQ7QUFBdUJDLElBQUFBLEtBQUssRUFBRTtBQUE5QixHQUhjLENBQWhCO0FBTUFFLEVBQUFBLEVBQUUsQ0FBQyxpQ0FBRCxFQUFvQyxZQUFNO0FBQzFDQyxJQUFBQSxNQUFNLENBQUMsWUFBTTtBQUNYLHdDQUFPLGdDQUFDLHNCQUFEO0FBQVksUUFBQSxPQUFPLEVBQUVMO0FBQXJCLFFBQVA7QUFDRCxLQUZLLENBQU4sQ0FFR00sR0FGSCxDQUVPQyxZQUZQO0FBR0QsR0FKQyxDQUFGO0FBTUFILEVBQUFBLEVBQUUsQ0FBQyw0REFBRCxFQUErRCxZQUFNO0FBQ3JFLHNDQUFPLGdDQUFDLHNCQUFEO0FBQVksTUFBQSxPQUFPLEVBQUVKO0FBQXJCLE1BQVA7QUFDQUssSUFBQUEsTUFBTSxDQUFDRyxlQUFPQyxTQUFQLENBQWlCLE9BQWpCLENBQUQsQ0FBTixDQUFrQ0MsV0FBbEM7QUFDQUwsSUFBQUEsTUFBTSxDQUFDRyxlQUFPRyxZQUFQLENBQW9CLE9BQXBCLENBQUQsQ0FBTixDQUFxQ0MsWUFBckMsQ0FBa0QsQ0FBbEQ7QUFDRCxHQUpDLENBQUY7QUFNQVIsRUFBQUEsRUFBRSxDQUFDLGlEQUFELEVBQW9ELFlBQU07QUFDMUQsc0NBQU8sZ0NBQUMsc0JBQUQ7QUFBWSxNQUFBLE9BQU8sRUFBRUosT0FBckI7QUFBOEIsTUFBQSxLQUFLLEVBQUM7QUFBcEMsTUFBUDtBQUNBSyxJQUFBQSxNQUFNLENBQUNHLGVBQU9DLFNBQVAsQ0FBaUIsT0FBakIsRUFBMEJJLFlBQTFCLENBQXVDLFlBQXZDLENBQUQsQ0FBTixDQUE2REMsT0FBN0QsQ0FBcUUsYUFBckU7QUFDQVQsSUFBQUEsTUFBTSxDQUFDRyxlQUFPTyxjQUFQLENBQXNCLGFBQXRCLENBQUQsQ0FBTixDQUE2Q0wsV0FBN0M7QUFDRCxHQUpDLENBQUY7QUFNQU4sRUFBQUEsRUFBRSxDQUFDLG9FQUFELEVBQXVFLFlBQU07QUFDN0Usc0NBQU8sZ0NBQUMsc0JBQUQ7QUFBWSxNQUFBLE9BQU8sRUFBRUosT0FBckI7QUFBOEIsTUFBQSxVQUFVO0FBQXhDLE1BQVA7O0FBQ0FRLG1CQUFPRyxZQUFQLENBQW9CLE9BQXBCLEVBQTZCSyxPQUE3QixDQUFxQyxVQUFBQyxPQUFPLEVBQUk7QUFDOUNaLE1BQUFBLE1BQU0sQ0FBQ1ksT0FBRCxDQUFOLENBQWdCQyxZQUFoQjtBQUNELEtBRkQ7QUFHRCxHQUxDLENBQUY7QUFPQWQsRUFBQUEsRUFBRSxDQUFDLDREQUFELEVBQStELFlBQU07QUFDckUsc0NBQU8sZ0NBQUMsc0JBQUQ7QUFBWSxNQUFBLE9BQU8sRUFBRUosT0FBckI7QUFBOEIsTUFBQSxLQUFLLEVBQUM7QUFBcEMsTUFBUDtBQUNBSyxJQUFBQSxNQUFNLENBQUNHLGVBQU9DLFNBQVAsQ0FBaUIsT0FBakIsRUFBMEI7QUFBRVUsTUFBQUEsSUFBSSxFQUFFO0FBQVIsS0FBMUIsQ0FBRCxDQUFOLENBQXFEQyxXQUFyRDtBQUNELEdBSEMsQ0FBRjtBQUtBaEIsRUFBQUEsRUFBRSxDQUFDLHVEQUFELEVBQTBELFlBQU07QUFDaEUsUUFBTWlCLFlBQVksR0FBR0MsSUFBSSxDQUFDQyxFQUFMLEVBQXJCO0FBQ0Esc0NBQU8sZ0NBQUMsc0JBQUQ7QUFBWSxNQUFBLE9BQU8sRUFBRXZCLE9BQXJCO0FBQThCLE1BQUEsS0FBSyxFQUFDLFdBQXBDO0FBQWdELE1BQUEsUUFBUSxFQUFFcUI7QUFBMUQsTUFBUDs7QUFFQSxRQUFNRyxLQUFLLEdBQUdoQixlQUFPQyxTQUFQLENBQWlCLE9BQWpCLEVBQTBCO0FBQUVVLE1BQUFBLElBQUksRUFBRTtBQUFSLEtBQTFCLENBQWQ7O0FBQ0FkLElBQUFBLE1BQU0sQ0FBQ2dCLFlBQUQsQ0FBTixDQUFxQkksZUFBckIsQ0FBcUMsQ0FBckM7O0FBQ0FDLHNCQUFVQyxLQUFWLENBQWdCSCxLQUFoQjs7QUFDQW5CLElBQUFBLE1BQU0sQ0FBQ2dCLFlBQUQsQ0FBTixDQUFxQkksZUFBckIsQ0FBcUMsQ0FBckM7QUFDRCxHQVJDLENBQUYsQ0FyQzRCLENBK0M1QjtBQUNELENBaERPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCdcbmltcG9ydCBSYWRpb0dyb3VwIGZyb20gJy4uL3NyYy9SYWRpb0dyb3VwJ1xuXG5kZXNjcmliZSgnUmFkaW8gR3JvdXAnLCAoKSA9PiB7XG4gIGNvbnN0IG9wdGlvbnMgPSBbXG4gICAgeyBsYWJlbDogJ1JlYWQtb25seScsIHZhbHVlOiAncmVhZC1vbmx5JyB9LFxuICAgIHsgbGFiZWw6ICdXcml0ZScsIHZhbHVlOiAnd3JpdGUnLCBpc0Rpc2FibGVkOiB0cnVlIH0sXG4gICAgeyBsYWJlbDogJ1Jlc3RyaWN0ZWQnLCB2YWx1ZTogJ3Jlc3RyaWN0ZWQnIH1cbiAgXVxuXG4gIGl0KCdzaG91bGQgbm90IGNyYXNoIHdoZW4gcmVuZGVyaW5nJywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICByZW5kZXIoPFJhZGlvR3JvdXAgb3B0aW9ucz17b3B0aW9uc30gLz4pXG4gICAgfSkubm90LnRvVGhyb3dFcnJvcigpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgdGhlIHJhZGlvIG9wdGlvbnMgd2l0aCB0aGUgb3B0aW9ucyBzcGVjaWZpZWQnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxSYWRpb0dyb3VwIG9wdGlvbnM9e29wdGlvbnN9IC8+KVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdncm91cCcpKS50b0JlVmlzaWJsZSgpXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRBbGxCeVJvbGUoJ3JhZGlvJykpLnRvSGF2ZUxlbmd0aCgzKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgc2hvdyBncm91cCBsYWJlbCB3aGVuIGxhYmVsIGlzIHNwZWNpZmllZCcsICgpID0+IHtcbiAgICByZW5kZXIoPFJhZGlvR3JvdXAgb3B0aW9ucz17b3B0aW9uc30gbGFiZWw9XCJQZXJtaXNzaW9uc1wiIC8+KVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdncm91cCcpLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpKS50b0VxdWFsKCdQZXJtaXNzaW9ucycpXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgnUGVybWlzc2lvbnMnKSkudG9CZVZpc2libGUoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgaGF2ZSBhbGwgb3B0aW9ucyBpbiByZXF1aXJlZCBzdGF0ZXMgd2hlbiBpc1JlcXVpcmVkIGlzIHRydWUnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxSYWRpb0dyb3VwIG9wdGlvbnM9e29wdGlvbnN9IGlzUmVxdWlyZWQgLz4pXG4gICAgc2NyZWVuLmdldEFsbEJ5Um9sZSgncmFkaW8nKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgZXhwZWN0KGVsZW1lbnQpLnRvQmVSZXF1aXJlZCgpXG4gICAgfSlcbiAgfSlcblxuICBpdCgnc2hvdWxkIHNlbGVjdCB0aGUgb3B0aW9uIHRoYXQgaGFzIHRoZSBzYW1lIHZhbHVlIHNwZWNpZmllZCcsICgpID0+IHtcbiAgICByZW5kZXIoPFJhZGlvR3JvdXAgb3B0aW9ucz17b3B0aW9uc30gdmFsdWU9XCJ3cml0ZVwiIC8+KVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdyYWRpbycsIHsgbmFtZTogJ1dyaXRlJyB9KSkudG9CZUNoZWNrZWQoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgaGFuZGxlIHN0YXRlIGNoYW5nZSB3aGVuIG9uQ2hhbmdlIGlzIHNwZWNpZmllZCcsICgpID0+IHtcbiAgICBjb25zdCBvbkNoYW5nZU1vY2sgPSBqZXN0LmZuKClcbiAgICByZW5kZXIoPFJhZGlvR3JvdXAgb3B0aW9ucz17b3B0aW9uc30gdmFsdWU9XCJyZWFkLW9ubHlcIiBvbkNoYW5nZT17b25DaGFuZ2VNb2NrfSAvPilcblxuICAgIGNvbnN0IHJhZGlvID0gc2NyZWVuLmdldEJ5Um9sZSgncmFkaW8nLCB7IG5hbWU6ICdSZXN0cmljdGVkJyB9KVxuICAgIGV4cGVjdChvbkNoYW5nZU1vY2spLnRvQmVDYWxsZWRUaW1lcygwKVxuICAgIGZpcmVFdmVudC5jbGljayhyYWRpbylcbiAgICBleHBlY3Qob25DaGFuZ2VNb2NrKS50b0JlQ2FsbGVkVGltZXMoMSlcbiAgfSlcblxuICAvLyB1bnRlc3RlZCBwcm9wczogZGVmYXVsdFZhbHVlLCBzaXplXG59KVxuIl19