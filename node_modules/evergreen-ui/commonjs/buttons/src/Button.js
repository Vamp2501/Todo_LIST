"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.getIconSizeForButton = exports.pseudoSelectors = exports.internalStyles = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiBox = _interopRequireWildcard(require("ui-box"));

var _hooks = require("../../hooks");

var _IconWrapper = require("../../icons/src/IconWrapper");

var _deprecatedThemeHelpers = require("../../lib/deprecated-theme-helpers");

var _spinner = require("../../spinner");

var _excluded = ["appearance", "children", "className", "color", "disabled", "iconAfter", "iconBefore", "intent", "is", "isActive", "isLoading"],
    _excluded2 = ["className"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* eslint-disable react/prop-types */
var ButtonIcon = /*#__PURE__*/(0, _react.memo)(function ButtonIcon(_ref) {
  var edge = _ref.edge,
      icon = _ref.icon,
      size = _ref.size,
      spacing = _ref.spacing;
  if (!icon) return null;
  var relativeSpace = typeof spacing === 'number' ? spacing : size;
  var edgeMargin = -Math.round(relativeSpace * 0.25);
  var innerMargin = Math.round(size * 0.7);
  var marginLeft = edge === 'start' ? edgeMargin : innerMargin;
  var marginRight = edge === 'end' ? edgeMargin : innerMargin;
  return /*#__PURE__*/_react["default"].createElement(_IconWrapper.IconWrapper, {
    icon: icon,
    size: size,
    marginLeft: marginLeft,
    marginRight: marginRight
  });
});
/* eslint-enable react/prop-types */

var internalStyles = {
  position: 'relative',
  fontWeight: 500,
  display: 'inline-flex',
  alignItems: 'center',
  flexWrap: 'nowrap',
  justifyContent: 'center',
  textDecoration: 'none',
  verticalAlign: 'middle',
  border: 'none',
  outline: 'none',
  userSelect: 'none',
  cursor: 'pointer',
  whiteSpace: 'nowrap',
  WebkitFontSmoothing: 'antialiased',
  WebkitAppearance: 'none',
  MozAppearance: 'none',
  '&::-moz-focus-inner ': {
    border: 0
  }
};
exports.internalStyles = internalStyles;
var pseudoSelectors = {
  _active: '&:not([disabled]):active, &:not([disabled])[aria-expanded="true"], &:not([disabled])[data-active]',
  _disabled: '&[disabled]',
  _focus: '&:not([disabled]):focus',
  _focusAndActive: '&:not([disabled]):focus:active, &:not([disabled])[aria-expanded="true"]:focus, &:not([disabled])[data-active]:focus',
  _hover: '&:not([disabled]):hover'
};
exports.pseudoSelectors = pseudoSelectors;

var getIconSizeForButton = function getIconSizeForButton(height) {
  if (height <= 28) return 12;
  if (height <= 32) return 14;
  if (height <= 40) return 16;
  if (height <= 48) return 18;
  return 20;
};

exports.getIconSizeForButton = getIconSizeForButton;
var Button = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function Button(props, ref) {
  var _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,
      children = props.children,
      className = props.className,
      color = props.color,
      disabled = props.disabled,
      iconAfter = props.iconAfter,
      iconBefore = props.iconBefore,
      _props$intent = props.intent,
      intent = _props$intent === void 0 ? 'none' : _props$intent,
      _props$is = props.is,
      is = _props$is === void 0 ? 'button' : _props$is,
      _props$isActive = props.isActive,
      isActive = _props$isActive === void 0 ? false : _props$isActive,
      isLoading = props.isLoading,
      restProps = (0, _objectWithoutProperties2["default"])(props, _excluded);

  var _useStyleConfig = (0, _hooks.useStyleConfig)('Button', {
    appearance: appearance,
    color: color,
    intent: intent,
    size: restProps.size || 'medium'
  }, pseudoSelectors, internalStyles),
      themedClassName = _useStyleConfig.className,
      boxProps = (0, _objectWithoutProperties2["default"])(_useStyleConfig, _excluded2);

  var height = restProps.height || boxProps.height; // Keep backwards compat font sizing if an explicit height was passed in.

  var textProps = !restProps.size && restProps.height ? (0, _deprecatedThemeHelpers.getTextPropsForControlHeight)(restProps.height) : {};
  var iconSize = getIconSizeForButton(height);
  return /*#__PURE__*/_react["default"].createElement(_uiBox["default"], (0, _extends2["default"])({
    is: is,
    ref: ref,
    className: (0, _classnames["default"])(themedClassName, className),
    "data-active": isActive || undefined
  }, boxProps, restProps, textProps, {
    disabled: disabled || isLoading
  }), isLoading && /*#__PURE__*/_react["default"].createElement(_spinner.Spinner, {
    marginLeft: -Math.round(height / 8),
    marginRight: Math.round(height / 4),
    size: Math.round(height / 2)
  }), /*#__PURE__*/_react["default"].createElement(ButtonIcon, {
    icon: iconBefore,
    size: iconSize,
    spacing: restProps.paddingLeft,
    edge: "start"
  }), children, /*#__PURE__*/_react["default"].createElement(ButtonIcon, {
    icon: iconAfter,
    size: iconSize,
    spacing: restProps.paddingRight,
    edge: "end"
  }));
}));
Button.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _uiBox.dimensions.propTypes), _uiBox.spacing.propTypes), _uiBox.position.propTypes), _uiBox.layout.propTypes), {}, {
  /**
   * The intent of the button.
   */
  intent: _propTypes["default"].string,

  /**
   * The appearance of the button.
   */
  appearance: _propTypes["default"].string,

  /**
   * The size of the button
   */
  size: _propTypes["default"].oneOf(['small', 'medium', 'large']),

  /**
   * When true, show a loading spinner before the children.
   * This also disables the button.
   */
  isLoading: _propTypes["default"].bool,

  /**
   * Forcefully set the active state of a button.
   * Useful in conjunction with a Popover.
   */
  isActive: _propTypes["default"].bool,

  /**
   * Sets an icon before the text. Can be any icon from Evergreen or a custom element.
   */
  iconBefore: _propTypes["default"].oneOfType([_propTypes["default"].elementType, _propTypes["default"].element]),

  /**
   * Sets an icon after the text. Can be any icon from Evergreen or a custom element.
   */
  iconAfter: _propTypes["default"].oneOfType([_propTypes["default"].elementType, _propTypes["default"].element]),

  /**
   * When true, the button is disabled.
   * isLoading also sets the button to disabled.
   */
  disabled: _propTypes["default"].bool,

  /**
   * Class name passed to the button.
   * Only use if you know what you are doing.
   */
  className: _propTypes["default"].string
});
var _default = Button;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,