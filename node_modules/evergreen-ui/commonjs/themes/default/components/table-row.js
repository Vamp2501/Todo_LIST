"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var colorMap = {
  none: {
    base: 'white',
    hover: 'colors.gray75',
    focus: 'colors.gray75',
    active: 'intents.info.background',
    current: 'intents.info.background'
  },
  danger: {
    base: 'intents.danger.background',
    hover: 'intents.danger.background',
    focus: 'colors.red100',
    active: 'colors.red100',
    current: 'colors.red100'
  },
  warning: {
    base: 'intents.warning.background',
    hover: 'intents.warning.background',
    focus: 'colors.orange100',
    active: 'colors.orange100',
    current: 'colors.orange100'
  },
  success: {
    base: 'intents.success.background',
    hover: 'intents.success.background',
    focus: 'colors.green100',
    active: 'colors.green100',
    current: 'colors.green100'
  }
};

var getBackgroundForIntentAndState = function getBackgroundForIntentAndState(intent, state) {
  return colorMap[intent][state];
};

var baseStyle = {
  outline: 'none',
  textDecoration: 'none',
  height: 64,
  _lastOfType: {
    borderBottom: 'none',
    borderBottomLeftRadius: 'radii.1',
    borderBottomRightRadius: 'radii.1'
  },
  _isSelectable: {
    cursor: 'pointer'
  }
};
var appearances = {
  "default": {
    backgroundColor: function backgroundColor(_, props) {
      return getBackgroundForIntentAndState(props.intent, 'base');
    },
    _hover: {
      backgroundColor: function backgroundColor(_, props) {
        return getBackgroundForIntentAndState(props.intent, 'hover');
      }
    },
    _focus: {
      backgroundColor: function backgroundColor(_, props) {
        return getBackgroundForIntentAndState(props.intent, 'focus');
      }
    },
    _active: {
      backgroundColor: function backgroundColor(_, props) {
        return getBackgroundForIntentAndState(props.intent, 'active');
      }
    },
    _current: {
      backgroundColor: function backgroundColor(_, props) {
        return getBackgroundForIntentAndState(props.intent, 'current');
      }
    }
  }
};
var _default = {
  baseStyle: baseStyle,
  appearances: appearances
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90aGVtZXMvZGVmYXVsdC9jb21wb25lbnRzL3RhYmxlLXJvdy5qcyJdLCJuYW1lcyI6WyJjb2xvck1hcCIsIm5vbmUiLCJiYXNlIiwiaG92ZXIiLCJmb2N1cyIsImFjdGl2ZSIsImN1cnJlbnQiLCJkYW5nZXIiLCJ3YXJuaW5nIiwic3VjY2VzcyIsImdldEJhY2tncm91bmRGb3JJbnRlbnRBbmRTdGF0ZSIsImludGVudCIsInN0YXRlIiwiYmFzZVN0eWxlIiwib3V0bGluZSIsInRleHREZWNvcmF0aW9uIiwiaGVpZ2h0IiwiX2xhc3RPZlR5cGUiLCJib3JkZXJCb3R0b20iLCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzIiwiYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMiLCJfaXNTZWxlY3RhYmxlIiwiY3Vyc29yIiwiYXBwZWFyYW5jZXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJfIiwicHJvcHMiLCJfaG92ZXIiLCJfZm9jdXMiLCJfYWN0aXZlIiwiX2N1cnJlbnQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU1BLFFBQVEsR0FBRztBQUNmQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsSUFBSSxFQUFFLE9BREY7QUFFSkMsSUFBQUEsS0FBSyxFQUFFLGVBRkg7QUFHSkMsSUFBQUEsS0FBSyxFQUFFLGVBSEg7QUFJSkMsSUFBQUEsTUFBTSxFQUFFLHlCQUpKO0FBS0pDLElBQUFBLE9BQU8sRUFBRTtBQUxMLEdBRFM7QUFTZkMsRUFBQUEsTUFBTSxFQUFFO0FBQ05MLElBQUFBLElBQUksRUFBRSwyQkFEQTtBQUVOQyxJQUFBQSxLQUFLLEVBQUUsMkJBRkQ7QUFHTkMsSUFBQUEsS0FBSyxFQUFFLGVBSEQ7QUFJTkMsSUFBQUEsTUFBTSxFQUFFLGVBSkY7QUFLTkMsSUFBQUEsT0FBTyxFQUFFO0FBTEgsR0FUTztBQWlCZkUsRUFBQUEsT0FBTyxFQUFFO0FBQ1BOLElBQUFBLElBQUksRUFBRSw0QkFEQztBQUVQQyxJQUFBQSxLQUFLLEVBQUUsNEJBRkE7QUFHUEMsSUFBQUEsS0FBSyxFQUFFLGtCQUhBO0FBSVBDLElBQUFBLE1BQU0sRUFBRSxrQkFKRDtBQUtQQyxJQUFBQSxPQUFPLEVBQUU7QUFMRixHQWpCTTtBQXlCZkcsRUFBQUEsT0FBTyxFQUFFO0FBQ1BQLElBQUFBLElBQUksRUFBRSw0QkFEQztBQUVQQyxJQUFBQSxLQUFLLEVBQUUsNEJBRkE7QUFHUEMsSUFBQUEsS0FBSyxFQUFFLGlCQUhBO0FBSVBDLElBQUFBLE1BQU0sRUFBRSxpQkFKRDtBQUtQQyxJQUFBQSxPQUFPLEVBQUU7QUFMRjtBQXpCTSxDQUFqQjs7QUFrQ0EsSUFBTUksOEJBQThCLEdBQUcsU0FBakNBLDhCQUFpQyxDQUFDQyxNQUFELEVBQVNDLEtBQVQ7QUFBQSxTQUFtQlosUUFBUSxDQUFDVyxNQUFELENBQVIsQ0FBaUJDLEtBQWpCLENBQW5CO0FBQUEsQ0FBdkM7O0FBRUEsSUFBTUMsU0FBUyxHQUFHO0FBQ2hCQyxFQUFBQSxPQUFPLEVBQUUsTUFETztBQUVoQkMsRUFBQUEsY0FBYyxFQUFFLE1BRkE7QUFHaEJDLEVBQUFBLE1BQU0sRUFBRSxFQUhRO0FBS2hCQyxFQUFBQSxXQUFXLEVBQUU7QUFDWEMsSUFBQUEsWUFBWSxFQUFFLE1BREg7QUFFWEMsSUFBQUEsc0JBQXNCLEVBQUUsU0FGYjtBQUdYQyxJQUFBQSx1QkFBdUIsRUFBRTtBQUhkLEdBTEc7QUFXaEJDLEVBQUFBLGFBQWEsRUFBRTtBQUNiQyxJQUFBQSxNQUFNLEVBQUU7QUFESztBQVhDLENBQWxCO0FBZ0JBLElBQU1DLFdBQVcsR0FBRztBQUNsQixhQUFTO0FBQ1BDLElBQUFBLGVBQWUsRUFBRSx5QkFBQ0MsQ0FBRCxFQUFJQyxLQUFKO0FBQUEsYUFBY2hCLDhCQUE4QixDQUFDZ0IsS0FBSyxDQUFDZixNQUFQLEVBQWUsTUFBZixDQUE1QztBQUFBLEtBRFY7QUFHUGdCLElBQUFBLE1BQU0sRUFBRTtBQUNOSCxNQUFBQSxlQUFlLEVBQUUseUJBQUNDLENBQUQsRUFBSUMsS0FBSjtBQUFBLGVBQWNoQiw4QkFBOEIsQ0FBQ2dCLEtBQUssQ0FBQ2YsTUFBUCxFQUFlLE9BQWYsQ0FBNUM7QUFBQTtBQURYLEtBSEQ7QUFPUGlCLElBQUFBLE1BQU0sRUFBRTtBQUNOSixNQUFBQSxlQUFlLEVBQUUseUJBQUNDLENBQUQsRUFBSUMsS0FBSjtBQUFBLGVBQWNoQiw4QkFBOEIsQ0FBQ2dCLEtBQUssQ0FBQ2YsTUFBUCxFQUFlLE9BQWYsQ0FBNUM7QUFBQTtBQURYLEtBUEQ7QUFXUGtCLElBQUFBLE9BQU8sRUFBRTtBQUNQTCxNQUFBQSxlQUFlLEVBQUUseUJBQUNDLENBQUQsRUFBSUMsS0FBSjtBQUFBLGVBQWNoQiw4QkFBOEIsQ0FBQ2dCLEtBQUssQ0FBQ2YsTUFBUCxFQUFlLFFBQWYsQ0FBNUM7QUFBQTtBQURWLEtBWEY7QUFlUG1CLElBQUFBLFFBQVEsRUFBRTtBQUNSTixNQUFBQSxlQUFlLEVBQUUseUJBQUNDLENBQUQsRUFBSUMsS0FBSjtBQUFBLGVBQWNoQiw4QkFBOEIsQ0FBQ2dCLEtBQUssQ0FBQ2YsTUFBUCxFQUFlLFNBQWYsQ0FBNUM7QUFBQTtBQURUO0FBZkg7QUFEUyxDQUFwQjtlQXNCZTtBQUNiRSxFQUFBQSxTQUFTLEVBQVRBLFNBRGE7QUFFYlUsRUFBQUEsV0FBVyxFQUFYQTtBQUZhLEMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb2xvck1hcCA9IHtcbiAgbm9uZToge1xuICAgIGJhc2U6ICd3aGl0ZScsXG4gICAgaG92ZXI6ICdjb2xvcnMuZ3JheTc1JyxcbiAgICBmb2N1czogJ2NvbG9ycy5ncmF5NzUnLFxuICAgIGFjdGl2ZTogJ2ludGVudHMuaW5mby5iYWNrZ3JvdW5kJyxcbiAgICBjdXJyZW50OiAnaW50ZW50cy5pbmZvLmJhY2tncm91bmQnXG4gIH0sXG5cbiAgZGFuZ2VyOiB7XG4gICAgYmFzZTogJ2ludGVudHMuZGFuZ2VyLmJhY2tncm91bmQnLFxuICAgIGhvdmVyOiAnaW50ZW50cy5kYW5nZXIuYmFja2dyb3VuZCcsXG4gICAgZm9jdXM6ICdjb2xvcnMucmVkMTAwJyxcbiAgICBhY3RpdmU6ICdjb2xvcnMucmVkMTAwJyxcbiAgICBjdXJyZW50OiAnY29sb3JzLnJlZDEwMCdcbiAgfSxcblxuICB3YXJuaW5nOiB7XG4gICAgYmFzZTogJ2ludGVudHMud2FybmluZy5iYWNrZ3JvdW5kJyxcbiAgICBob3ZlcjogJ2ludGVudHMud2FybmluZy5iYWNrZ3JvdW5kJyxcbiAgICBmb2N1czogJ2NvbG9ycy5vcmFuZ2UxMDAnLFxuICAgIGFjdGl2ZTogJ2NvbG9ycy5vcmFuZ2UxMDAnLFxuICAgIGN1cnJlbnQ6ICdjb2xvcnMub3JhbmdlMTAwJ1xuICB9LFxuXG4gIHN1Y2Nlc3M6IHtcbiAgICBiYXNlOiAnaW50ZW50cy5zdWNjZXNzLmJhY2tncm91bmQnLFxuICAgIGhvdmVyOiAnaW50ZW50cy5zdWNjZXNzLmJhY2tncm91bmQnLFxuICAgIGZvY3VzOiAnY29sb3JzLmdyZWVuMTAwJyxcbiAgICBhY3RpdmU6ICdjb2xvcnMuZ3JlZW4xMDAnLFxuICAgIGN1cnJlbnQ6ICdjb2xvcnMuZ3JlZW4xMDAnXG4gIH1cbn1cblxuY29uc3QgZ2V0QmFja2dyb3VuZEZvckludGVudEFuZFN0YXRlID0gKGludGVudCwgc3RhdGUpID0+IGNvbG9yTWFwW2ludGVudF1bc3RhdGVdXG5cbmNvbnN0IGJhc2VTdHlsZSA9IHtcbiAgb3V0bGluZTogJ25vbmUnLFxuICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICBoZWlnaHQ6IDY0LFxuXG4gIF9sYXN0T2ZUeXBlOiB7XG4gICAgYm9yZGVyQm90dG9tOiAnbm9uZScsXG4gICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogJ3JhZGlpLjEnLFxuICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAncmFkaWkuMSdcbiAgfSxcblxuICBfaXNTZWxlY3RhYmxlOiB7XG4gICAgY3Vyc29yOiAncG9pbnRlcidcbiAgfVxufVxuXG5jb25zdCBhcHBlYXJhbmNlcyA9IHtcbiAgZGVmYXVsdDoge1xuICAgIGJhY2tncm91bmRDb2xvcjogKF8sIHByb3BzKSA9PiBnZXRCYWNrZ3JvdW5kRm9ySW50ZW50QW5kU3RhdGUocHJvcHMuaW50ZW50LCAnYmFzZScpLFxuXG4gICAgX2hvdmVyOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IChfLCBwcm9wcykgPT4gZ2V0QmFja2dyb3VuZEZvckludGVudEFuZFN0YXRlKHByb3BzLmludGVudCwgJ2hvdmVyJylcbiAgICB9LFxuXG4gICAgX2ZvY3VzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IChfLCBwcm9wcykgPT4gZ2V0QmFja2dyb3VuZEZvckludGVudEFuZFN0YXRlKHByb3BzLmludGVudCwgJ2ZvY3VzJylcbiAgICB9LFxuXG4gICAgX2FjdGl2ZToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAoXywgcHJvcHMpID0+IGdldEJhY2tncm91bmRGb3JJbnRlbnRBbmRTdGF0ZShwcm9wcy5pbnRlbnQsICdhY3RpdmUnKVxuICAgIH0sXG5cbiAgICBfY3VycmVudDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAoXywgcHJvcHMpID0+IGdldEJhY2tncm91bmRGb3JJbnRlbnRBbmRTdGF0ZShwcm9wcy5pbnRlbnQsICdjdXJyZW50JylcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBiYXNlU3R5bGUsXG4gIGFwcGVhcmFuY2VzXG59XG4iXX0=