"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _layers = require("../../layers");

var _MenuDivider = _interopRequireDefault(require("./MenuDivider"));

var _MenuGroup = _interopRequireDefault(require("./MenuGroup"));

var _MenuItem = _interopRequireDefault(require("./MenuItem"));

var _MenuOption = _interopRequireDefault(require("./MenuOption"));

var _MenuOptionsGroup = _interopRequireDefault(require("./MenuOptionsGroup"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Menu = /*#__PURE__*/(0, _react.memo)(function Menu(props) {
  var menuRef = (0, _react.useRef)(null);
  var firstItem = (0, _react.useRef)();
  var lastItem = (0, _react.useRef)();
  var menuItems = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    var currentMenuRef = menuRef.current;
    menuItems.current = (0, _toConsumableArray2["default"])(currentMenuRef.querySelectorAll('[role="menuitemradio"]:not([disabled]), [role="menuitem"]:not([disabled])'));
    firstItem.current = menuItems.current[0];
    lastItem.current = menuItems.current[menuItems.current.length - 1]; // Go to next/previous item if it exists
    // or loop around

    var focusNext = function focusNext(currentItem, startItem) {
      // Determine which item is the startItem (first or last)
      var goingDown = startItem === firstItem.current; // Helper function for getting next legitimate element

      var move = function move(elem) {
        var indexOfItem = menuItems.current.indexOf(elem);

        if (goingDown) {
          if (indexOfItem < menuItems.current.length - 1) {
            return menuItems.current[indexOfItem + 1];
          }

          return startItem;
        }

        if (indexOfItem - 1 > -1) {
          return menuItems.current[indexOfItem - 1];
        }

        return startItem;
      }; // Make first move


      var nextItem = move(currentItem); // Focus the first one that's not disabled

      nextItem.focus();
    };

    function onKeyPressListener(e) {
      var target = e.target;
      var menuItem = menuItems.current && menuItems.current.find(function (item) {
        return item === target;
      });
      if (!menuItem) return;

      if (e.key === 'ArrowDown') {
        e.preventDefault();
        focusNext(menuItem, firstItem.current);
      }

      if (e.key === 'ArrowUp') {
        e.preventDefault();
        focusNext(menuItem, lastItem.current);
      }

      if (e.key === 'Home') {
        e.preventDefault();
        firstItem.current.focus();
      }

      if (e.key === 'End') {
        e.preventDefault();
        lastItem.current.focus();
      }
    }

    currentMenuRef.addEventListener('keydown', onKeyPressListener);
    return function () {
      currentMenuRef.removeEventListener('keydown', onKeyPressListener);
    };
  }, [menuRef]);
  var children = props.children;

  var renderEmptyChildren = function renderEmptyChildren() {
    return /*#__PURE__*/_react["default"].createElement(_MenuGroup["default"], null, /*#__PURE__*/_react["default"].createElement(_MenuItem["default"], {
      disabled: true
    }, "No items..."));
  };

  return /*#__PURE__*/_react["default"].createElement(_layers.Pane, {
    is: "nav",
    ref: menuRef,
    role: "menu",
    outline: "none"
  }, children || renderEmptyChildren());
});
Menu.Item = _MenuItem["default"];
Menu.Divider = _MenuDivider["default"];
Menu.Group = _MenuGroup["default"];
Menu.Divider = _MenuDivider["default"];
Menu.Group = _MenuGroup["default"];
Menu.Option = _MenuOption["default"];
Menu.OptionsGroup = _MenuOptionsGroup["default"];
Menu.propTypes = {
  /**
   * The children of the component.
   */
  children: _propTypes["default"].node
};
var _default = Menu;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tZW51L3NyYy9NZW51LmpzIl0sIm5hbWVzIjpbIk1lbnUiLCJwcm9wcyIsIm1lbnVSZWYiLCJmaXJzdEl0ZW0iLCJsYXN0SXRlbSIsIm1lbnVJdGVtcyIsImN1cnJlbnRNZW51UmVmIiwiY3VycmVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsZW5ndGgiLCJmb2N1c05leHQiLCJjdXJyZW50SXRlbSIsInN0YXJ0SXRlbSIsImdvaW5nRG93biIsIm1vdmUiLCJlbGVtIiwiaW5kZXhPZkl0ZW0iLCJpbmRleE9mIiwibmV4dEl0ZW0iLCJmb2N1cyIsIm9uS2V5UHJlc3NMaXN0ZW5lciIsImUiLCJ0YXJnZXQiLCJtZW51SXRlbSIsImZpbmQiLCJpdGVtIiwia2V5IiwicHJldmVudERlZmF1bHQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNoaWxkcmVuIiwicmVuZGVyRW1wdHlDaGlsZHJlbiIsIkl0ZW0iLCJNZW51SXRlbSIsIkRpdmlkZXIiLCJNZW51RGl2aWRlciIsIkdyb3VwIiwiTWVudUdyb3VwIiwiT3B0aW9uIiwiTWVudU9wdGlvbiIsIk9wdGlvbnNHcm91cCIsIk1lbnVPcHRpb25zR3JvdXAiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJub2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLElBQUksZ0JBQUcsaUJBQUssU0FBU0EsSUFBVCxDQUFjQyxLQUFkLEVBQXFCO0FBQ3JDLE1BQU1DLE9BQU8sR0FBRyxtQkFBTyxJQUFQLENBQWhCO0FBRUEsTUFBTUMsU0FBUyxHQUFHLG9CQUFsQjtBQUNBLE1BQU1DLFFBQVEsR0FBRyxvQkFBakI7QUFFQSxNQUFNQyxTQUFTLEdBQUcsb0JBQWxCO0FBRUEsd0JBQVUsWUFBTTtBQUNkLFFBQU1DLGNBQWMsR0FBR0osT0FBTyxDQUFDSyxP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QWYsQ0FBbUMsU0FBbkMsRUFBOENULGtCQUE5QztBQUNELEtBRkQ7QUFHRCxHQXpFRCxFQXlFRyxDQUFDbEIsT0FBRCxDQXpFSDtBQTJFQSxNQUFRNEIsUUFBUixHQUFxQjdCLEtBQXJCLENBQVE2QixRQUFSOztBQUVBLE1BQU1DLG1CQUFtQixHQUFHLFNBQXRCQSxtQkFBc0IsR0FBTTtBQUNoQyx3QkFDRSxnQ0FBQyxxQkFBRCxxQkFDRSxnQ0FBQyxvQkFBRDtBQUFVLE1BQUEsUUFBUTtBQUFsQixxQkFERixDQURGO0FBS0QsR0FORDs7QUFPQSxzQkFDRSxnQ0FBQyxZQUFEO0FBQU0sSUFBQSxFQUFFLEVBQUMsS0FBVDtBQUFlLElBQUEsR0FBRyxFQUFFN0IsT0FBcEI7QUFBNkIsSUFBQSxJQUFJLEVBQUMsTUFBbEM7QUFBeUMsSUFBQSxPQUFPLEVBQUM7QUFBakQsS0FDRzRCLFFBQVEsSUFBSUMsbUJBQW1CLEVBRGxDLENBREY7QUFLRCxDQWpHWSxDQUFiO0FBbUdBL0IsSUFBSSxDQUFDZ0MsSUFBTCxHQUFZQyxvQkFBWjtBQUNBakMsSUFBSSxDQUFDa0MsT0FBTCxHQUFlQyx1QkFBZjtBQUNBbkMsSUFBSSxDQUFDb0MsS0FBTCxHQUFhQyxxQkFBYjtBQUNBckMsSUFBSSxDQUFDa0MsT0FBTCxHQUFlQyx1QkFBZjtBQUNBbkMsSUFBSSxDQUFDb0MsS0FBTCxHQUFhQyxxQkFBYjtBQUNBckMsSUFBSSxDQUFDc0MsTUFBTCxHQUFjQyxzQkFBZDtBQUNBdkMsSUFBSSxDQUFDd0MsWUFBTCxHQUFvQkMsNEJBQXBCO0FBRUF6QyxJQUFJLENBQUMwQyxTQUFMLEdBQWlCO0FBQ2Y7QUFDRjtBQUNBO0FBQ0VaLEVBQUFBLFFBQVEsRUFBRWEsc0JBQVVDO0FBSkwsQ0FBakI7ZUFPZTVDLEkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgbWVtbywgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IFBhbmUgfSBmcm9tICcuLi8uLi9sYXllcnMnXG5pbXBvcnQgTWVudURpdmlkZXIgZnJvbSAnLi9NZW51RGl2aWRlcidcbmltcG9ydCBNZW51R3JvdXAgZnJvbSAnLi9NZW51R3JvdXAnXG5pbXBvcnQgTWVudUl0ZW0gZnJvbSAnLi9NZW51SXRlbSdcbmltcG9ydCBNZW51T3B0aW9uIGZyb20gJy4vTWVudU9wdGlvbidcbmltcG9ydCBNZW51T3B0aW9uc0dyb3VwIGZyb20gJy4vTWVudU9wdGlvbnNHcm91cCdcblxuY29uc3QgTWVudSA9IG1lbW8oZnVuY3Rpb24gTWVudShwcm9wcykge1xuICBjb25zdCBtZW51UmVmID0gdXNlUmVmKG51bGwpXG5cbiAgY29uc3QgZmlyc3RJdGVtID0gdXNlUmVmKClcbiAgY29uc3QgbGFzdEl0ZW0gPSB1c2VSZWYoKVxuXG4gIGNvbnN0IG1lbnVJdGVtcyA9IHVzZVJlZigpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBjdXJyZW50TWVudVJlZiA9IG1lbnVSZWYuY3VycmVudFxuICAgIG1lbnVJdGVtcy5jdXJyZW50ID0gW1xuICAgICAgLi4uY3VycmVudE1lbnVSZWYucXVlcnlTZWxlY3RvckFsbCgnW3JvbGU9XCJtZW51aXRlbXJhZGlvXCJdOm5vdChbZGlzYWJsZWRdKSwgW3JvbGU9XCJtZW51aXRlbVwiXTpub3QoW2Rpc2FibGVkXSknKVxuICAgIF1cblxuICAgIGZpcnN0SXRlbS5jdXJyZW50ID0gbWVudUl0ZW1zLmN1cnJlbnRbMF1cbiAgICBsYXN0SXRlbS5jdXJyZW50ID0gbWVudUl0ZW1zLmN1cnJlbnRbbWVudUl0ZW1zLmN1cnJlbnQubGVuZ3RoIC0gMV1cblxuICAgIC8vIEdvIHRvIG5leHQvcHJldmlvdXMgaXRlbSBpZiBpdCBleGlzdHNcbiAgICAvLyBvciBsb29wIGFyb3VuZFxuICAgIGNvbnN0IGZvY3VzTmV4dCA9IChjdXJyZW50SXRlbSwgc3RhcnRJdGVtKSA9PiB7XG4gICAgICAvLyBEZXRlcm1pbmUgd2hpY2ggaXRlbSBpcyB0aGUgc3RhcnRJdGVtIChmaXJzdCBvciBsYXN0KVxuICAgICAgY29uc3QgZ29pbmdEb3duID0gc3RhcnRJdGVtID09PSBmaXJzdEl0ZW0uY3VycmVudFxuXG4gICAgICAvLyBIZWxwZXIgZnVuY3Rpb24gZm9yIGdldHRpbmcgbmV4dCBsZWdpdGltYXRlIGVsZW1lbnRcbiAgICAgIGNvbnN0IG1vdmUgPSBlbGVtID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXhPZkl0ZW0gPSBtZW51SXRlbXMuY3VycmVudC5pbmRleE9mKGVsZW0pXG5cbiAgICAgICAgaWYgKGdvaW5nRG93bikge1xuICAgICAgICAgIGlmIChpbmRleE9mSXRlbSA8IG1lbnVJdGVtcy5jdXJyZW50Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBtZW51SXRlbXMuY3VycmVudFtpbmRleE9mSXRlbSArIDFdXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN0YXJ0SXRlbVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4T2ZJdGVtIC0gMSA+IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIG1lbnVJdGVtcy5jdXJyZW50W2luZGV4T2ZJdGVtIC0gMV1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdGFydEl0ZW1cbiAgICAgIH1cblxuICAgICAgLy8gTWFrZSBmaXJzdCBtb3ZlXG4gICAgICBjb25zdCBuZXh0SXRlbSA9IG1vdmUoY3VycmVudEl0ZW0pXG5cbiAgICAgIC8vIEZvY3VzIHRoZSBmaXJzdCBvbmUgdGhhdCdzIG5vdCBkaXNhYmxlZFxuICAgICAgbmV4dEl0ZW0uZm9jdXMoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uS2V5UHJlc3NMaXN0ZW5lcihlKSB7XG4gICAgICBjb25zdCB7IHRhcmdldCB9ID0gZVxuICAgICAgY29uc3QgbWVudUl0ZW0gPSBtZW51SXRlbXMuY3VycmVudCAmJiBtZW51SXRlbXMuY3VycmVudC5maW5kKGl0ZW0gPT4gaXRlbSA9PT0gdGFyZ2V0KVxuXG4gICAgICBpZiAoIW1lbnVJdGVtKSByZXR1cm5cblxuICAgICAgaWYgKGUua2V5ID09PSAnQXJyb3dEb3duJykge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgZm9jdXNOZXh0KG1lbnVJdGVtLCBmaXJzdEl0ZW0uY3VycmVudClcbiAgICAgIH1cblxuICAgICAgaWYgKGUua2V5ID09PSAnQXJyb3dVcCcpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIGZvY3VzTmV4dChtZW51SXRlbSwgbGFzdEl0ZW0uY3VycmVudClcbiAgICAgIH1cblxuICAgICAgaWYgKGUua2V5ID09PSAnSG9tZScpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIGZpcnN0SXRlbS5jdXJyZW50LmZvY3VzKClcbiAgICAgIH1cblxuICAgICAgaWYgKGUua2V5ID09PSAnRW5kJykge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgbGFzdEl0ZW0uY3VycmVudC5mb2N1cygpXG4gICAgICB9XG4gICAgfVxuXG4gICAgY3VycmVudE1lbnVSZWYuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uS2V5UHJlc3NMaXN0ZW5lcilcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjdXJyZW50TWVudVJlZi5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25LZXlQcmVzc0xpc3RlbmVyKVxuICAgIH1cbiAgfSwgW21lbnVSZWZdKVxuXG4gIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHByb3BzXG5cbiAgY29uc3QgcmVuZGVyRW1wdHlDaGlsZHJlbiA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPE1lbnVHcm91cD5cbiAgICAgICAgPE1lbnVJdGVtIGRpc2FibGVkPk5vIGl0ZW1zLi4uPC9NZW51SXRlbT5cbiAgICAgIDwvTWVudUdyb3VwPlxuICAgIClcbiAgfVxuICByZXR1cm4gKFxuICAgIDxQYW5lIGlzPVwibmF2XCIgcmVmPXttZW51UmVmfSByb2xlPVwibWVudVwiIG91dGxpbmU9XCJub25lXCI+XG4gICAgICB7Y2hpbGRyZW4gfHwgcmVuZGVyRW1wdHlDaGlsZHJlbigpfVxuICAgIDwvUGFuZT5cbiAgKVxufSlcblxuTWVudS5JdGVtID0gTWVudUl0ZW1cbk1lbnUuRGl2aWRlciA9IE1lbnVEaXZpZGVyXG5NZW51Lkdyb3VwID0gTWVudUdyb3VwXG5NZW51LkRpdmlkZXIgPSBNZW51RGl2aWRlclxuTWVudS5Hcm91cCA9IE1lbnVHcm91cFxuTWVudS5PcHRpb24gPSBNZW51T3B0aW9uXG5NZW51Lk9wdGlvbnNHcm91cCA9IE1lbnVPcHRpb25zR3JvdXBcblxuTWVudS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY2hpbGRyZW4gb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufVxuXG5leHBvcnQgZGVmYXVsdCBNZW51XG4iXX0=