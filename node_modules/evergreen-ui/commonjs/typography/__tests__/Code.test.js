"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _faker = _interopRequireDefault(require("faker"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _testing = require("../../../lib/testing");

var _theme = require("../../theme");

var _themes = require("../../themes");

var _Code = _interopRequireDefault(require("../src/Code"));

expect.addSnapshotSerializer(_testing.UIBoxSerializer);
describe('Code', function () {
  it('Should render', function () {
    expect(function () {
      return (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Code["default"], null, "This is my code"));
    }).not.toThrow();
  });
  it.each([['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600]])('<Code /> %s renders as expected', function (_, size) {
    var component = /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
      value: _themes.defaultTheme
    }, /*#__PURE__*/_react["default"].createElement(_Code["default"], {
      size: size
    }, "Text ".concat(size)));

    var tree = _reactTestRenderer["default"].create(component).toJSON();

    expect(tree).toMatchSnapshot();
  });
  it.each([['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600]])('<Code /> %s with minimal appearance specified renders as expected', function (_, size) {
    var component = /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
      value: _themes.defaultTheme
    }, /*#__PURE__*/_react["default"].createElement(_Code["default"], {
      size: size,
      appearance: "minimal"
    }, "Text ".concat(size)));

    var tree = _reactTestRenderer["default"].create(component).toJSON();

    expect(tree).toMatchSnapshot();
  });
  it('should pass through `className` prop', function () {
    var expected = _faker["default"].random.word().toLowerCase();

    var component = /*#__PURE__*/_react["default"].createElement(_Code["default"], {
      "data-testid": "code",
      className: expected
    }, "Testing");

    var _render = (0, _react2.render)(component),
        getByTestId = _render.getByTestId;

    expect(getByTestId('code')).toHaveClass(expected);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90eXBvZ3JhcGh5L19fdGVzdHNfXy9Db2RlLnRlc3QuanMiXSwibmFtZXMiOlsiZXhwZWN0IiwiYWRkU25hcHNob3RTZXJpYWxpemVyIiwiVUlCb3hTZXJpYWxpemVyIiwiZGVzY3JpYmUiLCJpdCIsIm5vdCIsInRvVGhyb3ciLCJlYWNoIiwiXyIsInNpemUiLCJjb21wb25lbnQiLCJkZWZhdWx0VGhlbWUiLCJ0cmVlIiwicmVuZGVyZXIiLCJjcmVhdGUiLCJ0b0pTT04iLCJ0b01hdGNoU25hcHNob3QiLCJleHBlY3RlZCIsImZha2VyIiwicmFuZG9tIiwid29yZCIsInRvTG93ZXJDYXNlIiwiZ2V0QnlUZXN0SWQiLCJ0b0hhdmVDbGFzcyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBQSxNQUFNLENBQUNDLHFCQUFQLENBQTZCQyx3QkFBN0I7QUFFQUMsUUFBUSxDQUFDLE1BQUQsRUFBUyxZQUFNO0FBQ3JCQyxFQUFBQSxFQUFFLENBQUMsZUFBRCxFQUFrQixZQUFNO0FBQ3hCSixJQUFBQSxNQUFNLENBQUM7QUFBQSxhQUFNLGtDQUFPLGdDQUFDLGdCQUFELDBCQUFQLENBQU47QUFBQSxLQUFELENBQU4sQ0FBbURLLEdBQW5ELENBQXVEQyxPQUF2RDtBQUNELEdBRkMsQ0FBRjtBQUlBRixFQUFBQSxFQUFFLENBQUNHLElBQUgsQ0FBUSxDQUNOLENBQUMsVUFBRCxFQUFhLEdBQWIsQ0FETSxFQUVOLENBQUMsVUFBRCxFQUFhLEdBQWIsQ0FGTSxFQUdOLENBQUMsVUFBRCxFQUFhLEdBQWIsQ0FITSxFQUlOLENBQUMsVUFBRCxFQUFhLEdBQWIsQ0FKTSxDQUFSLEVBS0csaUNBTEgsRUFLc0MsVUFBQ0MsQ0FBRCxFQUFJQyxJQUFKLEVBQWE7QUFDakQsUUFBTUMsU0FBUyxnQkFDYixnQ0FBQyxvQkFBRDtBQUFlLE1BQUEsS0FBSyxFQUFFQztBQUF0QixvQkFDRSxnQ0FBQyxnQkFBRDtBQUFNLE1BQUEsSUFBSSxFQUFFRjtBQUFaLHNCQUEyQkEsSUFBM0IsRUFERixDQURGOztBQUtBLFFBQU1HLElBQUksR0FBR0MsOEJBQVNDLE1BQVQsQ0FBZ0JKLFNBQWhCLEVBQTJCSyxNQUEzQixFQUFiOztBQUNBZixJQUFBQSxNQUFNLENBQUNZLElBQUQsQ0FBTixDQUFhSSxlQUFiO0FBQ0QsR0FiRDtBQWVBWixFQUFBQSxFQUFFLENBQUNHLElBQUgsQ0FBUSxDQUNOLENBQUMsVUFBRCxFQUFhLEdBQWIsQ0FETSxFQUVOLENBQUMsVUFBRCxFQUFhLEdBQWIsQ0FGTSxFQUdOLENBQUMsVUFBRCxFQUFhLEdBQWIsQ0FITSxFQUlOLENBQUMsVUFBRCxFQUFhLEdBQWIsQ0FKTSxDQUFSLEVBS0csbUVBTEgsRUFLd0UsVUFBQ0MsQ0FBRCxFQUFJQyxJQUFKLEVBQWE7QUFDbkYsUUFBTUMsU0FBUyxnQkFDYixnQ0FBQyxvQkFBRDtBQUFlLE1BQUEsS0FBSyxFQUFFQztBQUF0QixvQkFDRSxnQ0FBQyxnQkFBRDtBQUFNLE1BQUEsSUFBSSxFQUFFRixJQUFaO0FBQWtCLE1BQUEsVUFBVSxFQUFDO0FBQTdCLHNCQUFnREEsSUFBaEQsRUFERixDQURGOztBQUtBLFFBQU1HLElBQUksR0FBR0MsOEJBQVNDLE1BQVQsQ0FBZ0JKLFNBQWhCLEVBQTJCSyxNQUEzQixFQUFiOztBQUNBZixJQUFBQSxNQUFNLENBQUNZLElBQUQsQ0FBTixDQUFhSSxlQUFiO0FBQ0QsR0FiRDtBQWVBWixFQUFBQSxFQUFFLENBQUMsc0NBQUQsRUFBeUMsWUFBTTtBQUMvQyxRQUFNYSxRQUFRLEdBQUdDLGtCQUFNQyxNQUFOLENBQWFDLElBQWIsR0FBb0JDLFdBQXBCLEVBQWpCOztBQUNBLFFBQU1YLFNBQVMsZ0JBQ2IsZ0NBQUMsZ0JBQUQ7QUFBTSxxQkFBWSxNQUFsQjtBQUF5QixNQUFBLFNBQVMsRUFBRU87QUFBcEMsaUJBREY7O0FBS0Esa0JBQXdCLG9CQUFPUCxTQUFQLENBQXhCO0FBQUEsUUFBUVksV0FBUixXQUFRQSxXQUFSOztBQUNBdEIsSUFBQUEsTUFBTSxDQUFDc0IsV0FBVyxDQUFDLE1BQUQsQ0FBWixDQUFOLENBQTRCQyxXQUE1QixDQUF3Q04sUUFBeEM7QUFDRCxHQVRDLENBQUY7QUFVRCxDQTdDTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCdcbmltcG9ydCBmYWtlciBmcm9tICdmYWtlcidcbmltcG9ydCByZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJ1xuaW1wb3J0IHsgVUlCb3hTZXJpYWxpemVyIH0gZnJvbSAnLi4vLi4vLi4vbGliL3Rlc3RpbmcnXG5pbXBvcnQgeyBUaGVtZVByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vdGhlbWUnXG5pbXBvcnQgeyBkZWZhdWx0VGhlbWUgfSBmcm9tICcuLi8uLi90aGVtZXMnXG5pbXBvcnQgQ29kZSBmcm9tICcuLi9zcmMvQ29kZSdcblxuZXhwZWN0LmFkZFNuYXBzaG90U2VyaWFsaXplcihVSUJveFNlcmlhbGl6ZXIpXG5cbmRlc2NyaWJlKCdDb2RlJywgKCkgPT4ge1xuICBpdCgnU2hvdWxkIHJlbmRlcicsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4gcmVuZGVyKDxDb2RlPlRoaXMgaXMgbXkgY29kZTwvQ29kZT4pKS5ub3QudG9UaHJvdygpXG4gIH0pXG5cbiAgaXQuZWFjaChbXG4gICAgWydzaXplIDMwMCcsIDMwMF0sXG4gICAgWydzaXplIDQwMCcsIDQwMF0sXG4gICAgWydzaXplIDUwMCcsIDUwMF0sXG4gICAgWydzaXplIDYwMCcsIDYwMF1cbiAgXSkoJzxDb2RlIC8+ICVzIHJlbmRlcnMgYXMgZXhwZWN0ZWQnLCAoXywgc2l6ZSkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IChcbiAgICAgIDxUaGVtZVByb3ZpZGVyIHZhbHVlPXtkZWZhdWx0VGhlbWV9PlxuICAgICAgICA8Q29kZSBzaXplPXtzaXplfT57YFRleHQgJHtzaXplfWB9PC9Db2RlPlxuICAgICAgPC9UaGVtZVByb3ZpZGVyPlxuICAgIClcbiAgICBjb25zdCB0cmVlID0gcmVuZGVyZXIuY3JlYXRlKGNvbXBvbmVudCkudG9KU09OKClcbiAgICBleHBlY3QodHJlZSkudG9NYXRjaFNuYXBzaG90KClcbiAgfSlcblxuICBpdC5lYWNoKFtcbiAgICBbJ3NpemUgMzAwJywgMzAwXSxcbiAgICBbJ3NpemUgNDAwJywgNDAwXSxcbiAgICBbJ3NpemUgNTAwJywgNTAwXSxcbiAgICBbJ3NpemUgNjAwJywgNjAwXVxuICBdKSgnPENvZGUgLz4gJXMgd2l0aCBtaW5pbWFsIGFwcGVhcmFuY2Ugc3BlY2lmaWVkIHJlbmRlcnMgYXMgZXhwZWN0ZWQnLCAoXywgc2l6ZSkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IChcbiAgICAgIDxUaGVtZVByb3ZpZGVyIHZhbHVlPXtkZWZhdWx0VGhlbWV9PlxuICAgICAgICA8Q29kZSBzaXplPXtzaXplfSBhcHBlYXJhbmNlPVwibWluaW1hbFwiPntgVGV4dCAke3NpemV9YH08L0NvZGU+XG4gICAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICAgKVxuICAgIGNvbnN0IHRyZWUgPSByZW5kZXJlci5jcmVhdGUoY29tcG9uZW50KS50b0pTT04oKVxuICAgIGV4cGVjdCh0cmVlKS50b01hdGNoU25hcHNob3QoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcGFzcyB0aHJvdWdoIGBjbGFzc05hbWVgIHByb3AnLCAoKSA9PiB7XG4gICAgY29uc3QgZXhwZWN0ZWQgPSBmYWtlci5yYW5kb20ud29yZCgpLnRvTG93ZXJDYXNlKClcbiAgICBjb25zdCBjb21wb25lbnQgPSAoXG4gICAgICA8Q29kZSBkYXRhLXRlc3RpZD1cImNvZGVcIiBjbGFzc05hbWU9e2V4cGVjdGVkfT5cbiAgICAgICAgVGVzdGluZ1xuICAgICAgPC9Db2RlPlxuICAgIClcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoY29tcG9uZW50KVxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnY29kZScpKS50b0hhdmVDbGFzcyhleHBlY3RlZClcbiAgfSlcbn0pXG4iXX0=