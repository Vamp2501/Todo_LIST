"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _faker = _interopRequireDefault(require("faker"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _testing = require("../../../lib/testing");

var _theme = require("../../theme");

var _themes = require("../../themes");

var _Text = _interopRequireDefault(require("../src/Text"));

expect.addSnapshotSerializer(_testing.UIBoxSerializer);
test.each([['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600]])('<Text /> %s renders as expected', function (_, size) {
  var component = /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
    value: _themes.defaultTheme
  }, /*#__PURE__*/_react["default"].createElement(_Text["default"], {
    size: size
  }, "Text ".concat(size)));

  var tree = _reactTestRenderer["default"].create(component).toJSON();

  expect(tree).toMatchSnapshot();
});
describe('Colors', function () {
  test('<Text /> accepts arbitrary theme values for color', function () {
    var component = /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
      value: _themes.defaultTheme
    }, /*#__PURE__*/_react["default"].createElement(_Text["default"], {
      color: "muted"
    }, "Testing"), ' ');

    var tree = _reactTestRenderer["default"].create(component).toJSON();

    expect(tree).toMatchSnapshot();
  });
  test('<Text /> does not render any color when a non-theme color is passed in ', function () {
    var component = /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
      value: _themes.defaultTheme
    }, /*#__PURE__*/_react["default"].createElement(_Text["default"], {
      color: "SOMETHING DOESNT EXISt"
    }, "Testing"), ' ');

    var tree = _reactTestRenderer["default"].create(component).toJSON();

    expect(tree).toMatchSnapshot();
  });
});
describe('Sizing', function () {
  var originalConsoleError = console.error;
  var mockFn = jest.fn();
  beforeEach(function () {
    console.error = mockFn;
  });
  afterEach(function () {
    console.error = originalConsoleError;
  });
  test('<Text /> has undefined behavior when trying to set arbitrary sizes', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Text["default"], {
      size: 800
    }));
    expect(mockFn.mock.calls.length).toEqual(1);
    expect(mockFn.mock.calls[0][0]).toMatchInlineSnapshot("\n      Extracted Styles:\n      box-sizing: border-box;\n      color: #474d66;\n      font-family: \"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n\n\n      \"Warning: Failed %s type: %s%s\"\n    ");
  });
});
describe('Props', function () {
  it('should forward `className` prop', function () {
    var expected = _faker["default"].random.word().toLowerCase();

    var component = /*#__PURE__*/_react["default"].createElement(_Text["default"], {
      "data-testid": "text",
      className: expected
    }, "Testing");

    var _render = (0, _react2.render)(component),
        getByTestId = _render.getByTestId;

    expect(getByTestId('text')).toHaveClass(expected);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90eXBvZ3JhcGh5L19fdGVzdHNfXy9UZXh0LnRlc3QuanMiXSwibmFtZXMiOlsiZXhwZWN0IiwiYWRkU25hcHNob3RTZXJpYWxpemVyIiwiVUlCb3hTZXJpYWxpemVyIiwidGVzdCIsImVhY2giLCJfIiwic2l6ZSIsImNvbXBvbmVudCIsImRlZmF1bHRUaGVtZSIsInRyZWUiLCJyZW5kZXJlciIsImNyZWF0ZSIsInRvSlNPTiIsInRvTWF0Y2hTbmFwc2hvdCIsImRlc2NyaWJlIiwib3JpZ2luYWxDb25zb2xlRXJyb3IiLCJjb25zb2xlIiwiZXJyb3IiLCJtb2NrRm4iLCJqZXN0IiwiZm4iLCJiZWZvcmVFYWNoIiwiYWZ0ZXJFYWNoIiwibW9jayIsImNhbGxzIiwibGVuZ3RoIiwidG9FcXVhbCIsInRvTWF0Y2hJbmxpbmVTbmFwc2hvdCIsIml0IiwiZXhwZWN0ZWQiLCJmYWtlciIsInJhbmRvbSIsIndvcmQiLCJ0b0xvd2VyQ2FzZSIsImdldEJ5VGVzdElkIiwidG9IYXZlQ2xhc3MiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQUEsTUFBTSxDQUFDQyxxQkFBUCxDQUE2QkMsd0JBQTdCO0FBRUFDLElBQUksQ0FBQ0MsSUFBTCxDQUFVLENBQ1IsQ0FBQyxVQUFELEVBQWEsR0FBYixDQURRLEVBRVIsQ0FBQyxVQUFELEVBQWEsR0FBYixDQUZRLEVBR1IsQ0FBQyxVQUFELEVBQWEsR0FBYixDQUhRLEVBSVIsQ0FBQyxVQUFELEVBQWEsR0FBYixDQUpRLENBQVYsRUFLRyxpQ0FMSCxFQUtzQyxVQUFDQyxDQUFELEVBQUlDLElBQUosRUFBYTtBQUNqRCxNQUFNQyxTQUFTLGdCQUNiLGdDQUFDLG9CQUFEO0FBQWUsSUFBQSxLQUFLLEVBQUVDO0FBQXRCLGtCQUNFLGdDQUFDLGdCQUFEO0FBQU0sSUFBQSxJQUFJLEVBQUVGO0FBQVosb0JBQTJCQSxJQUEzQixFQURG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XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0J1xuaW1wb3J0IGZha2VyIGZyb20gJ2Zha2VyJ1xuaW1wb3J0IHJlbmRlcmVyIGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInXG5pbXBvcnQgeyBVSUJveFNlcmlhbGl6ZXIgfSBmcm9tICcuLi8uLi8uLi9saWIvdGVzdGluZydcbmltcG9ydCB7IFRoZW1lUHJvdmlkZXIgfSBmcm9tICcuLi8uLi90aGVtZSdcbmltcG9ydCB7IGRlZmF1bHRUaGVtZSB9IGZyb20gJy4uLy4uL3RoZW1lcydcbmltcG9ydCBUZXh0IGZyb20gJy4uL3NyYy9UZXh0J1xuXG5leHBlY3QuYWRkU25hcHNob3RTZXJpYWxpemVyKFVJQm94U2VyaWFsaXplcilcblxudGVzdC5lYWNoKFtcbiAgWydzaXplIDMwMCcsIDMwMF0sXG4gIFsnc2l6ZSA0MDAnLCA0MDBdLFxuICBbJ3NpemUgNTAwJywgNTAwXSxcbiAgWydzaXplIDYwMCcsIDYwMF1cbl0pKCc8VGV4dCAvPiAlcyByZW5kZXJzIGFzIGV4cGVjdGVkJywgKF8sIHNpemUpID0+IHtcbiAgY29uc3QgY29tcG9uZW50ID0gKFxuICAgIDxUaGVtZVByb3ZpZGVyIHZhbHVlPXtkZWZhdWx0VGhlbWV9PlxuICAgICAgPFRleHQgc2l6ZT17c2l6ZX0+e2BUZXh0ICR7c2l6ZX1gfTwvVGV4dD5cbiAgICA8L1RoZW1lUHJvdmlkZXI+XG4gIClcbiAgY29uc3QgdHJlZSA9IHJlbmRlcmVyLmNyZWF0ZShjb21wb25lbnQpLnRvSlNPTigpXG4gIGV4cGVjdCh0cmVlKS50b01hdGNoU25hcHNob3QoKVxufSlcblxuZGVzY3JpYmUoJ0NvbG9ycycsICgpID0+IHtcbiAgdGVzdCgnPFRleHQgLz4gYWNjZXB0cyBhcmJpdHJhcnkgdGhlbWUgdmFsdWVzIGZvciBjb2xvcicsICgpID0+IHtcbiAgICBjb25zdCBjb21wb25lbnQgPSAoXG4gICAgICA8VGhlbWVQcm92aWRlciB2YWx1ZT17ZGVmYXVsdFRoZW1lfT5cbiAgICAgICAgPFRleHQgY29sb3I9XCJtdXRlZFwiPlRlc3Rpbmc8L1RleHQ+eycgJ31cbiAgICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgICApXG4gICAgY29uc3QgdHJlZSA9IHJlbmRlcmVyLmNyZWF0ZShjb21wb25lbnQpLnRvSlNPTigpXG4gICAgZXhwZWN0KHRyZWUpLnRvTWF0Y2hTbmFwc2hvdCgpXG4gIH0pXG5cbiAgdGVzdCgnPFRleHQgLz4gZG9lcyBub3QgcmVuZGVyIGFueSBjb2xvciB3aGVuIGEgbm9uLXRoZW1lIGNvbG9yIGlzIHBhc3NlZCBpbiAnLCAoKSA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gKFxuICAgICAgPFRoZW1lUHJvdmlkZXIgdmFsdWU9e2RlZmF1bHRUaGVtZX0+XG4gICAgICAgIDxUZXh0IGNvbG9yPVwiU09NRVRISU5HIERPRVNOVCBFWElTdFwiPlRlc3Rpbmc8L1RleHQ+eycgJ31cbiAgICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgICApXG4gICAgY29uc3QgdHJlZSA9IHJlbmRlcmVyLmNyZWF0ZShjb21wb25lbnQpLnRvSlNPTigpXG4gICAgZXhwZWN0KHRyZWUpLnRvTWF0Y2hTbmFwc2hvdCgpXG4gIH0pXG59KVxuXG5kZXNjcmliZSgnU2l6aW5nJywgKCkgPT4ge1xuICBjb25zdCBvcmlnaW5hbENvbnNvbGVFcnJvciA9IGNvbnNvbGUuZXJyb3JcbiAgY29uc3QgbW9ja0ZuID0gamVzdC5mbigpXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IgPSBtb2NrRm5cbiAgfSlcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IgPSBvcmlnaW5hbENvbnNvbGVFcnJvclxuICB9KVxuXG4gIHRlc3QoJzxUZXh0IC8+IGhhcyB1bmRlZmluZWQgYmVoYXZpb3Igd2hlbiB0cnlpbmcgdG8gc2V0IGFyYml0cmFyeSBzaXplcycsICgpID0+IHtcbiAgICByZW5kZXIoPFRleHQgc2l6ZT17ODAwfSAvPilcbiAgICBleHBlY3QobW9ja0ZuLm1vY2suY2FsbHMubGVuZ3RoKS50b0VxdWFsKDEpXG4gICAgZXhwZWN0KG1vY2tGbi5tb2NrLmNhbGxzWzBdWzBdKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgRXh0cmFjdGVkIFN0eWxlczpcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICBjb2xvcjogIzQ3NGQ2NjtcbiAgICAgIGZvbnQtZmFtaWx5OiBcIlNGIFVJIFRleHRcIiwgLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcIlNlZ29lIFVJXCIsIFJvYm90bywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZiwgXCJBcHBsZSBDb2xvciBFbW9qaVwiLCBcIlNlZ29lIFVJIEVtb2ppXCIsIFwiU2Vnb2UgVUkgU3ltYm9sXCI7XG5cblxuICAgICAgXCJXYXJuaW5nOiBGYWlsZWQgJXMgdHlwZTogJXMlc1wiXG4gICAgYClcbiAgfSlcbn0pXG5cbmRlc2NyaWJlKCdQcm9wcycsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBmb3J3YXJkIGBjbGFzc05hbWVgIHByb3AnLCAoKSA9PiB7XG4gICAgY29uc3QgZXhwZWN0ZWQgPSBmYWtlci5yYW5kb20ud29yZCgpLnRvTG93ZXJDYXNlKClcbiAgICBjb25zdCBjb21wb25lbnQgPSAoXG4gICAgICA8VGV4dCBkYXRhLXRlc3RpZD1cInRleHRcIiBjbGFzc05hbWU9e2V4cGVjdGVkfT5cbiAgICAgICAgVGVzdGluZ1xuICAgICAgPC9UZXh0PlxuICAgIClcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoY29tcG9uZW50KVxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgndGV4dCcpKS50b0hhdmVDbGFzcyhleHBlY3RlZClcbiAgfSlcbn0pXG4iXX0=