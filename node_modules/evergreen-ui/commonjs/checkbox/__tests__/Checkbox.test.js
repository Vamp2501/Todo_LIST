"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _Checkbox = _interopRequireDefault(require("../src/Checkbox"));

describe('Checkbox', function () {
  it('should not crash when rendering', function () {
    expect(function () {
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], null));
    }).not.toThrowError();
  });
  it('should render', function () {
    expect(function () {
      (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], null));
    }).not.toBeNull();
  });
  it('should render with an id', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
      id: "test-123"
    }));
    expect(_react2.screen.getByRole('checkbox').getAttribute('id')).toEqual('test-123');
  });
  it('should render with a name', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
      name: "test-name"
    }));
    expect(_react2.screen.getByRole('checkbox').getAttribute('name')).toEqual('test-name');
  });
  it('should render label with no checked', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
      label: "Check me"
    }));
    expect(_react2.screen.getByText('Check me')).toBeVisible();
    expect(_react2.screen.getByRole('checkbox').checked).toBeFalsy();
  });
  it('should be in indeterminate state', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
      indeterminate: true
    }));
    expect(_react2.screen.getByRole('checkbox').indeterminate).toBeTruthy();
  });
  it('should be in checked state', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
      checked: true
    }));
    expect(_react2.screen.getByRole('checkbox').checked).toBeTruthy();
  });
  it('should be disable when disabled is true', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
      disabled: true
    }));
    expect(_react2.screen.getByRole('checkbox').disabled).toBeTruthy();
  });
  it('should check and uncheck checkbox when clicked', function () {
    function ControlledCheckbox() {
      var _React$useState = _react["default"].useState(false),
          _React$useState2 = (0, _slicedToArray2["default"])(_React$useState, 2),
          checked = _React$useState2[0],
          setChecked = _React$useState2[1];

      return /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
        checked: checked,
        onChange: function onChange(e) {
          setChecked(e.target.checked);
        }
      });
    }

    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(ControlledCheckbox, null));

    var checkbox = _react2.screen.getByRole('checkbox');

    expect(_react2.screen.getByRole('checkbox').checked).toBeFalsy();

    _react2.fireEvent.click(checkbox);

    expect(_react2.screen.getByRole('checkbox').checked).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jaGVja2JveC9fX3Rlc3RzX18vQ2hlY2tib3gudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwiZXhwZWN0Iiwibm90IiwidG9UaHJvd0Vycm9yIiwidG9CZU51bGwiLCJzY3JlZW4iLCJnZXRCeVJvbGUiLCJnZXRBdHRyaWJ1dGUiLCJ0b0VxdWFsIiwiZ2V0QnlUZXh0IiwidG9CZVZpc2libGUiLCJjaGVja2VkIiwidG9CZUZhbHN5IiwiaW5kZXRlcm1pbmF0ZSIsInRvQmVUcnV0aHkiLCJkaXNhYmxlZCIsIkNvbnRyb2xsZWRDaGVja2JveCIsIlJlYWN0IiwidXNlU3RhdGUiLCJzZXRDaGVja2VkIiwiZSIsInRhcmdldCIsImNoZWNrYm94IiwiZmlyZUV2ZW50IiwiY2xpY2siXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBQSxRQUFRLENBQUMsVUFBRCxFQUFhLFlBQU07QUFDekJDLEVBQUFBLEVBQUUsQ0FBQyxpQ0FBRCxFQUFvQyxZQUFNO0FBQzFDQyxJQUFBQSxNQUFNLENBQUMsWUFBTTtBQUNYLHdDQUFPLGdDQUFDLG9CQUFELE9BQVA7QUFDRCxLQUZLLENBQU4sQ0FFR0MsR0FGSCxDQUVPQyxZQUZQO0FBR0QsR0FKQyxDQUFGO0FBTUFILEVBQUFBLEVBQUUsQ0FBQyxlQUFELEVBQWtCLFlBQU07QUFDeEJDLElBQUFBLE1BQU0sQ0FBQyxZQUFNO0FBQ1gsd0NBQU8sZ0NBQUMsb0JBQUQsT0FBUDtBQUNELEtBRkssQ0FBTixDQUVHQyxHQUZILENBRU9FLFFBRlA7QUFHRCxHQUpDLENBQUY7QUFNQUosRUFBQUEsRUFBRSxDQUFDLDBCQUFELEVBQTZCLFlBQU07QUFDbkMsc0NBQU8sZ0NBQUMsb0JBQUQ7QUFBVSxNQUFBLEVBQUUsRUFBQztBQUFiLE1BQVA7QUFDQUMsSUFBQUEsTUFBTSxDQUFDSSxlQUFPQyxTQUFQLENBQWlCLFVBQWpCLEVBQTZCQyxZQUE3QixDQUEwQyxJQUExQyxDQUFELENBQU4sQ0FBd0RDLE9BQXhELENBQWdFLFVBQWhFO0FBQ0QsR0FIQyxDQUFGO0FBS0FSLEVBQUFBLEVBQUUsQ0FBQywyQkFBRCxFQUE4QixZQUFNO0FBQ3BDLHNDQUFPLGdDQUFDLG9CQUFEO0FBQVUsTUFBQSxJQUFJLEVBQUM7QUFBZixNQUFQO0FBQ0FDLElBQUFBLE1BQU0sQ0FBQ0ksZUFBT0MsU0FBUCxDQUFpQixVQUFqQixFQUE2QkMsWUFBN0IsQ0FBMEMsTUFBMUMsQ0FBRCxDQUFOLENBQTBEQyxPQUExRCxDQUFrRSxXQUFsRTtBQUNELEdBSEMsQ0FBRjtBQUtBUixFQUFBQSxFQUFFLENBQUMscUNBQUQsRUFBd0MsWUFBTTtBQUM5QyxzQ0FBTyxnQ0FBQyxvQkFBRDtBQUFVLE1BQUEsS0FBSyxFQUFDO0FBQWhCLE1BQVA7QUFDQUMsSUFBQUEsTUFBTSxDQUFDSSxlQUFPSSxTQUFQLENBQWlCLFVBQWpCLENBQUQsQ0FBTixDQUFxQ0MsV0FBckM7QUFDQVQsSUFBQUEsTUFBTSxDQUFDSSxlQUFPQyxTQUFQLENBQWlCLFVBQWpCLEVBQTZCSyxPQUE5QixDQUFOLENBQTZDQyxTQUE3QztBQUNELEdBSkMsQ0FBRjtBQU1BWixFQUFBQSxFQUFFLENBQUMsa0NBQUQsRUFBcUMsWUFBTTtBQUMzQyxzQ0FBTyxnQ0FBQyxvQkFBRDtBQUFVLE1BQUEsYUFBYTtBQUF2QixNQUFQO0FBQ0FDLElBQUFBLE1BQU0sQ0FBQ0ksZUFBT0MsU0FBUCxDQUFpQixVQUFqQixFQUE2Qk8sYUFBOUIsQ0FBTixDQUFtREMsVUFBbkQ7QUFDRCxHQUhDLENBQUY7QUFLQWQsRUFBQUEsRUFBRSxDQUFDLDRCQUFELEVBQStCLFlBQU07QUFDckMsc0NBQU8sZ0NBQUMsb0JBQUQ7QUFBVSxNQUFBLE9BQU87QUFBakIsTUFBUDtBQUNBQyxJQUFBQSxNQUFNLENBQUNJLGVBQU9DLFNBQVAsQ0FBaUIsVUFBakIsRUFBNkJLLE9BQTlCLENBQU4sQ0FBNkNHLFVBQTdDO0FBQ0QsR0FIQyxDQUFGO0FBS0FkLEVBQUFBLEVBQUUsQ0FBQyx5Q0FBRCxFQUE0QyxZQUFNO0FBQ2xELHNDQUFPLGdDQUFDLG9CQUFEO0FBQVUsTUFBQSxRQUFRO0FBQWxCLE1BQVA7QUFDQUMsSUFBQUEsTUFBTSxDQUFDSSxlQUFPQyxTQUFQLENBQWlCLFVBQWpCLEVBQTZCUyxRQUE5QixDQUFOLENBQThDRCxVQUE5QztBQUNELEdBSEMsQ0FBRjtBQUtBZCxFQUFBQSxFQUFFLENBQUMsZ0RBQUQsRUFBbUQsWUFBTTtBQUN6RCxhQUFTZ0Isa0JBQVQsR0FBOEI7QUFDNUIsNEJBQThCQyxrQkFBTUMsUUFBTixDQUFlLEtBQWYsQ0FBOUI7QUFBQTtBQUFBLFVBQU9QLE9BQVA7QUFBQSxVQUFnQlEsVUFBaEI7O0FBQ0EsMEJBQ0UsZ0NBQUMsb0JBQUQ7QUFDRSxRQUFBLE9BQU8sRUFBRVIsT0FEWDtBQUVFLFFBQUEsUUFBUSxFQUFFLGtCQUFBUyxDQUFDLEVBQUk7QUFDYkQsVUFBQUEsVUFBVSxDQUFDQyxDQUFDLENBQUNDLE1BQUYsQ0FBU1YsT0FBVixDQUFWO0FBQ0Q7QUFKSCxRQURGO0FBUUQ7O0FBQ0Qsc0NBQU8sZ0NBQUMsa0JBQUQsT0FBUDs7QUFDQSxRQUFNVyxRQUFRLEdBQUdqQixlQUFPQyxTQUFQLENBQWlCLFVBQWpCLENBQWpCOztBQUNBTCxJQUFBQSxNQUFNLENBQUNJLGVBQU9DLFNBQVAsQ0FBaUIsVUFBakIsRUFBNkJLLE9BQTlCLENBQU4sQ0FBNkNDLFNBQTdDOztBQUNBVyxzQkFBVUMsS0FBVixDQUFnQkYsUUFBaEI7O0FBQ0FyQixJQUFBQSxNQUFNLENBQUNJLGVBQU9DLFNBQVAsQ0FBaUIsVUFBakIsRUFBNkJLLE9BQTlCLENBQU4sQ0FBNkNHLFVBQTdDO0FBQ0QsR0FqQkMsQ0FBRjtBQWtCRCxDQTlETyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnLi4vc3JjL0NoZWNrYm94J1xuXG5kZXNjcmliZSgnQ2hlY2tib3gnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgbm90IGNyYXNoIHdoZW4gcmVuZGVyaW5nJywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICByZW5kZXIoPENoZWNrYm94IC8+KVxuICAgIH0pLm5vdC50b1Rocm93RXJyb3IoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmVuZGVyJywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICByZW5kZXIoPENoZWNrYm94IC8+KVxuICAgIH0pLm5vdC50b0JlTnVsbCgpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgd2l0aCBhbiBpZCcsICgpID0+IHtcbiAgICByZW5kZXIoPENoZWNrYm94IGlkPVwidGVzdC0xMjNcIiAvPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnY2hlY2tib3gnKS5nZXRBdHRyaWJ1dGUoJ2lkJykpLnRvRXF1YWwoJ3Rlc3QtMTIzJylcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJlbmRlciB3aXRoIGEgbmFtZScsICgpID0+IHtcbiAgICByZW5kZXIoPENoZWNrYm94IG5hbWU9XCJ0ZXN0LW5hbWVcIiAvPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnY2hlY2tib3gnKS5nZXRBdHRyaWJ1dGUoJ25hbWUnKSkudG9FcXVhbCgndGVzdC1uYW1lJylcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJlbmRlciBsYWJlbCB3aXRoIG5vIGNoZWNrZWQnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxDaGVja2JveCBsYWJlbD1cIkNoZWNrIG1lXCIgLz4pXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0NoZWNrIG1lJykpLnRvQmVWaXNpYmxlKClcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnY2hlY2tib3gnKS5jaGVja2VkKS50b0JlRmFsc3koKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgYmUgaW4gaW5kZXRlcm1pbmF0ZSBzdGF0ZScsICgpID0+IHtcbiAgICByZW5kZXIoPENoZWNrYm94IGluZGV0ZXJtaW5hdGUgLz4pXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2NoZWNrYm94JykuaW5kZXRlcm1pbmF0ZSkudG9CZVRydXRoeSgpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBiZSBpbiBjaGVja2VkIHN0YXRlJywgKCkgPT4ge1xuICAgIHJlbmRlcig8Q2hlY2tib3ggY2hlY2tlZCAvPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnY2hlY2tib3gnKS5jaGVja2VkKS50b0JlVHJ1dGh5KClcbiAgfSlcblxuICBpdCgnc2hvdWxkIGJlIGRpc2FibGUgd2hlbiBkaXNhYmxlZCBpcyB0cnVlJywgKCkgPT4ge1xuICAgIHJlbmRlcig8Q2hlY2tib3ggZGlzYWJsZWQgLz4pXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2NoZWNrYm94JykuZGlzYWJsZWQpLnRvQmVUcnV0aHkoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgY2hlY2sgYW5kIHVuY2hlY2sgY2hlY2tib3ggd2hlbiBjbGlja2VkJywgKCkgPT4ge1xuICAgIGZ1bmN0aW9uIENvbnRyb2xsZWRDaGVja2JveCgpIHtcbiAgICAgIGNvbnN0IFtjaGVja2VkLCBzZXRDaGVja2VkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPENoZWNrYm94XG4gICAgICAgICAgY2hlY2tlZD17Y2hlY2tlZH1cbiAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB7XG4gICAgICAgICAgICBzZXRDaGVja2VkKGUudGFyZ2V0LmNoZWNrZWQpXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIClcbiAgICB9XG4gICAgcmVuZGVyKDxDb250cm9sbGVkQ2hlY2tib3ggLz4pXG4gICAgY29uc3QgY2hlY2tib3ggPSBzY3JlZW4uZ2V0QnlSb2xlKCdjaGVja2JveCcpXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2NoZWNrYm94JykuY2hlY2tlZCkudG9CZUZhbHN5KClcbiAgICBmaXJlRXZlbnQuY2xpY2soY2hlY2tib3gpXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2NoZWNrYm94JykuY2hlY2tlZCkudG9CZVRydXRoeSgpXG4gIH0pXG59KVxuIl19