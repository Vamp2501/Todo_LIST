"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _preventBodyScroll = _interopRequireDefault(require("../prevent-body-scroll"));

describe('preventBodyScroll', function () {
  it('Should change body overflow to hidden on true and reset overflow on false', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            expect(document.body.style.overflow).toEqual('');
            (0, _preventBodyScroll["default"])(true);
            expect(document.body.style.overflow).toEqual('hidden');
            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual('');

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('Should be able to handle changes from other scripts changing body overflow', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // Repeat logic of first test
            expect(document.body.style.overflow).toEqual('');
            (0, _preventBodyScroll["default"])(true);
            expect(document.body.style.overflow).toEqual('hidden');
            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual(''); // Outside source changes overflow to hidden

            document.body.style.overflow = 'hidden'; // Restores 'hidden' as expected

            expect(document.body.style.overflow).toEqual('hidden');
            (0, _preventBodyScroll["default"])(true);
            expect(document.body.style.overflow).toEqual('hidden');
            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual('hidden'); // 'hidden' should no longer be apart of the history

            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual(''); // Outside source changes overflow to ''

            document.body.style.overflow = ''; // Repeat steps from first test to ensure it is not affected

            expect(document.body.style.overflow).toEqual('');
            (0, _preventBodyScroll["default"])(true);
            expect(document.body.style.overflow).toEqual('hidden');
            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual('');

          case 19:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('Should be able to restore multiple layers of overflow values', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            document.body.style.overflow = ''; // First overlay

            (0, _preventBodyScroll["default"])(true);
            expect(document.body.style.overflow).toEqual('hidden'); // Second overlay

            (0, _preventBodyScroll["default"])(true);
            expect(document.body.style.overflow).toEqual('hidden'); // Third overlay

            (0, _preventBodyScroll["default"])(true);
            expect(document.body.style.overflow).toEqual('hidden'); // Remove third overlay

            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual('hidden'); // Remove second overlay

            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual('hidden'); // Remove first overlay

            (0, _preventBodyScroll["default"])(false);
            expect(document.body.style.overflow).toEqual('');

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvX190ZXN0c19fL3ByZXZlbnQtYm9keS1zY3JvbGwudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwiZXhwZWN0IiwiZG9jdW1lbnQiLCJib2R5Iiwic3R5bGUiLCJvdmVyZmxvdyIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0FBRUFBLFFBQVEsQ0FBQyxtQkFBRCxFQUFzQixZQUFNO0FBQ2xDQyxFQUFBQSxFQUFFLENBQUMsMkVBQUQsNkZBQThFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDOUVDLFlBQUFBLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDQyxJQUFULENBQWNDLEtBQWQsQ0FBb0JDLFFBQXJCLENBQU4sQ0FBcUNDLE9BQXJDLENBQTZDLEVBQTdDO0FBQ0EsK0NBQWtCLElBQWxCO0FBQ0FMLFlBQUFBLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDQyxJQUFULENBQWNDLEtBQWQsQ0FBb0JDLFFBQXJCLENBQU4sQ0FBcUNDLE9BQXJDLENBQTZDLFFBQTdDO0FBQ0EsK0NBQWtCLEtBQWxCO0FBQ0FMLFlBQUFBLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDQyxJQUFULENBQWNDLEtBQWQsQ0FBb0JDLFFBQXJCLENBQU4sQ0FBcUNDLE9BQXJDLENBQTZDLEVBQTdDOztBQUw4RTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUE5RSxHQUFGO0FBT0FOLEVBQUFBLEVBQUUsQ0FBQyw0RUFBRCw2RkFBK0U7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUMvRTtBQUNBQyxZQUFBQSxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjQyxLQUFkLENBQW9CQyxRQUFyQixDQUFOLENBQXFDQyxPQUFyQyxDQUE2QyxFQUE3QztBQUNBLCtDQUFrQixJQUFsQjtBQUNBTCxZQUFBQSxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjQyxLQUFkLENBQW9CQyxRQUFyQixDQUFOLENBQXFDQyxPQUFyQyxDQUE2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S0FBZCxDQUFvQkMsUUFBckIsQ0FBTixDQUFxQ0MsT0FBckMsQ0FBNkMsUUFBN0MsRUFqQmlFLENBa0JqRTs7QUFDQSwrQ0FBa0IsS0FBbEI7QUFDQUwsWUFBQUEsTUFBTSxDQUFDQyxRQUFRLENBQUNDLElBQVQsQ0FBY0MsS0FBZCxDQUFvQkMsUUFBckIsQ0FBTixDQUFxQ0MsT0FBckMsQ0FBNkMsRUFBN0M7O0FBcEJpRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFqRSxHQUFGO0FBc0JELENBM0RPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcHJldmVudEJvZHlTY3JvbGwgZnJvbSAnLi4vcHJldmVudC1ib2R5LXNjcm9sbCdcblxuZGVzY3JpYmUoJ3ByZXZlbnRCb2R5U2Nyb2xsJywgKCkgPT4ge1xuICBpdCgnU2hvdWxkIGNoYW5nZSBib2R5IG92ZXJmbG93IHRvIGhpZGRlbiBvbiB0cnVlIGFuZCByZXNldCBvdmVyZmxvdyBvbiBmYWxzZScsIGFzeW5jICgpID0+IHtcbiAgICBleHBlY3QoZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdykudG9FcXVhbCgnJylcbiAgICBwcmV2ZW50Qm9keVNjcm9sbCh0cnVlKVxuICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93KS50b0VxdWFsKCdoaWRkZW4nKVxuICAgIHByZXZlbnRCb2R5U2Nyb2xsKGZhbHNlKVxuICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93KS50b0VxdWFsKCcnKVxuICB9KVxuICBpdCgnU2hvdWxkIGJlIGFibGUgdG8gaGFuZGxlIGNoYW5nZXMgZnJvbSBvdGhlciBzY3JpcHRzIGNoYW5naW5nIGJvZHkgb3ZlcmZsb3cnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gUmVwZWF0IGxvZ2ljIG9mIGZpcnN0IHRlc3RcbiAgICBleHBlY3QoZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdykudG9FcXVhbCgnJylcbiAgICBwcmV2ZW50Qm9keVNjcm9sbCh0cnVlKVxuICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93KS50b0VxdWFsKCdoaWRkZW4nKVxuICAgIHByZXZlbnRCb2R5U2Nyb2xsKGZhbHNlKVxuICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93KS50b0VxdWFsKCcnKVxuXG4gICAgLy8gT3V0c2lkZSBzb3VyY2UgY2hhbmdlcyBvdmVyZmxvdyB0byBoaWRkZW5cbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbidcbiAgICAvLyBSZXN0b3JlcyAnaGlkZGVuJyBhcyBleHBlY3RlZFxuICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93KS50b0VxdWFsKCdoaWRkZW4nKVxuICAgIHByZXZlbnRCb2R5U2Nyb2xsKHRydWUpXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvRXF1YWwoJ2hpZGRlbicpXG4gICAgcHJldmVudEJvZHlTY3JvbGwoZmFsc2UpXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvRXF1YWwoJ2hpZGRlbicpXG4gICAgLy8gJ2hpZGRlbicgc2hvdWxkIG5vIGxvbmdlciBiZSBhcGFydCBvZiB0aGUgaGlzdG9yeVxuICAgIHByZXZlbnRCb2R5U2Nyb2xsKGZhbHNlKVxuICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93KS50b0VxdWFsKCcnKVxuXG4gICAgLy8gT3V0c2lkZSBzb3VyY2UgY2hhbmdlcyBvdmVyZmxvdyB0byAnJ1xuICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnJ1xuICAgIC8vIFJlcGVhdCBzdGVwcyBmcm9tIGZpcnN0IHRlc3QgdG8gZW5zdXJlIGl0IGlzIG5vdCBhZmZlY3RlZFxuICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93KS50b0VxdWFsKCcnKVxuICAgIHByZXZlbnRCb2R5U2Nyb2xsKHRydWUpXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvRXF1YWwoJ2hpZGRlbicpXG4gICAgcHJldmVudEJvZHlTY3JvbGwoZmFsc2UpXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvRXF1YWwoJycpXG4gIH0pXG4gIGl0KCdTaG91bGQgYmUgYWJsZSB0byByZXN0b3JlIG11bHRpcGxlIGxheWVycyBvZiBvdmVyZmxvdyB2YWx1ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICcnXG4gICAgLy8gRmlyc3Qgb3ZlcmxheVxuICAgIHByZXZlbnRCb2R5U2Nyb2xsKHRydWUpXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvRXF1YWwoJ2hpZGRlbicpXG4gICAgLy8gU2Vjb25kIG92ZXJsYXlcbiAgICBwcmV2ZW50Qm9keVNjcm9sbCh0cnVlKVxuICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93KS50b0VxdWFsKCdoaWRkZW4nKVxuICAgIC8vIFRoaXJkIG92ZXJsYXlcbiAgICBwcmV2ZW50Qm9keVNjcm9sbCh0cnVlKVxuICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93KS50b0VxdWFsKCdoaWRkZW4nKVxuXG4gICAgLy8gUmVtb3ZlIHRoaXJkIG92ZXJsYXlcbiAgICBwcmV2ZW50Qm9keVNjcm9sbChmYWxzZSlcbiAgICBleHBlY3QoZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdykudG9FcXVhbCgnaGlkZGVuJylcbiAgICAvLyBSZW1vdmUgc2Vjb25kIG92ZXJsYXlcbiAgICBwcmV2ZW50Qm9keVNjcm9sbChmYWxzZSlcbiAgICBleHBlY3QoZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdykudG9FcXVhbCgnaGlkZGVuJylcbiAgICAvLyBSZW1vdmUgZmlyc3Qgb3ZlcmxheVxuICAgIHByZXZlbnRCb2R5U2Nyb2xsKGZhbHNlKVxuICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93KS50b0VxdWFsKCcnKVxuICB9KVxufSlcbiJdfQ==