"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = preventBodyScroll;
var previousOverflow = [];
var previousPaddingRight = [];
/**
 * Toggle the body scroll / overflow and additional styling
 * necessary to preserve scroll position and body width (scrollbar replacement)
 *
 * @param {boolean} preventScroll - whether or not to prevent body scrolling
 */

function preventBodyScroll(preventScroll) {
  /** Get the width before toggling the style so we can calculate the scrollbar width for a smooth, jankless style change */
  var _document$body$getBou = document.body.getBoundingClientRect(),
      width = _document$body$getBou.width;
  /** Apply or remove overflow style */


  if (preventScroll) {
    previousOverflow.push(document.body.style.overflow);
    document.body.style.overflow = 'hidden';
  } else {
    document.body.style.overflow = previousOverflow.pop() || '';
  }
  /** Get the _new width_ of the body (this will tell us the scrollbar width) */


  var newWidth = document.body.getBoundingClientRect().width;
  var scrollBarWidth = newWidth - width;
  /** If there's a diff due to scrollbars, then account for it with padding */

  if (preventScroll) {
    previousPaddingRight.push(document.body.style.paddingRight);
    document.body.style.paddingRight = Math.max(0, scrollBarWidth || 0) + 'px';
  } else {
    document.body.style.paddingRight = previousPaddingRight.pop() || '';
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcHJldmVudC1ib2R5LXNjcm9sbC5qcyJdLCJuYW1lcyI6WyJwcmV2aW91c092ZXJmbG93IiwicHJldmlvdXNQYWRkaW5nUmlnaHQiLCJwcmV2ZW50Qm9keVNjcm9sbCIsInByZXZlbnRTY3JvbGwiLCJkb2N1bWVudCIsImJvZHkiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsInB1c2giLCJzdHlsZSIsIm92ZXJmbG93IiwicG9wIiwibmV3V2lkdGgiLCJzY3JvbGxCYXJXaWR0aCIsInBhZGRpbmdSaWdodCIsIk1hdGgiLCJtYXgiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU1BLGdCQUFnQixHQUFHLEVBQXpCO0FBQ0EsSUFBTUMsb0JBQW9CLEdBQUcsRUFBN0I7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ2UsU0FBU0MsaUJBQVQsQ0FBMkJDLGFBQTNCLEVBQTBDO0FBQ3ZEO0FBQ0EsOEJBQWtCQyxRQUFRLENBQUNDLElBQVQsQ0FBY0MscUJBQWQsRUFBbEI7QUFBQSxNQUFRQyxLQUFSLHlCQUFRQSxLQUFSO0FBRUE7OztBQUNBLE1BQUlKLGFBQUosRUFBbUI7QUFDakJILElBQUFBLGdCQUFnQixDQUFDUSxJQUFqQixDQUFzQkosUUFBUSxDQUFDQyxJQUFULENBQWNJLEtBQWQsQ0FBb0JDLFFBQTFDO0FBQ0FOLElBQUFBLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjSSxLQUFkLENBQW9CQyxRQUFwQixHQUErQixRQUEvQjtBQUNELEdBSEQsTUFHTztBQUNMTixJQUFBQSxRQUFRLENBQUNDLElBQVQsQ0FBY0ksS0FBZCxDQUFvQkMsUUFBcEIsR0FBK0JWLGdCQUFnQixDQUFDVyxHQUFqQixNQUEwQixFQUF6RDtBQUNEO0FBRUQ7OztBQUNBLE1BQU1DLFFBQVEsR0FBR1IsUUFBUSxDQUFDQyxJQUFULENBQWNDLHFCQUFkLEdBQXNDQyxLQUF2RDtBQUNBLE1BQU1NLGNBQWMsR0FBR0QsUUFBUSxHQUFHTCxLQUFsQztBQUVBOztBQUNBLE1BQUlKLGFBQUosRUFBbUI7QUFDakJGLElBQUFBLG9CQUFvQixDQUFDTyxJQUFyQixDQUEwQkosUUFBUSxDQUFDQyxJQUFULENBQWNJLEtBQWQsQ0FBb0JLLFlBQTlDO0FBQ0FWLElBQUFBLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjSSxLQUFkLENBQW9CSyxZQUFwQixHQUFtQ0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZSCxjQUFjLElBQUksQ0FBOUIsSUFBbUMsSUFBdEU7QUFDRCxHQUhELE1BR087QUFDTFQsSUFBQUEsUUFBUSxDQUFDQyxJQUFULENBQWNJLEtBQWQsQ0FBb0JLLFlBQXBCLEdBQW1DYixvQkFBb0IsQ0FBQ1UsR0FBckIsTUFBOEIsRUFBakU7QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcHJldmlvdXNPdmVyZmxvdyA9IFtdXG5jb25zdCBwcmV2aW91c1BhZGRpbmdSaWdodCA9IFtdXG5cbi8qKlxuICogVG9nZ2xlIHRoZSBib2R5IHNjcm9sbCAvIG92ZXJmbG93IGFuZCBhZGRpdGlvbmFsIHN0eWxpbmdcbiAqIG5lY2Vzc2FyeSB0byBwcmVzZXJ2ZSBzY3JvbGwgcG9zaXRpb24gYW5kIGJvZHkgd2lkdGggKHNjcm9sbGJhciByZXBsYWNlbWVudClcbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHByZXZlbnRTY3JvbGwgLSB3aGV0aGVyIG9yIG5vdCB0byBwcmV2ZW50IGJvZHkgc2Nyb2xsaW5nXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXZlbnRCb2R5U2Nyb2xsKHByZXZlbnRTY3JvbGwpIHtcbiAgLyoqIEdldCB0aGUgd2lkdGggYmVmb3JlIHRvZ2dsaW5nIHRoZSBzdHlsZSBzbyB3ZSBjYW4gY2FsY3VsYXRlIHRoZSBzY3JvbGxiYXIgd2lkdGggZm9yIGEgc21vb3RoLCBqYW5rbGVzcyBzdHlsZSBjaGFuZ2UgKi9cbiAgY29uc3QgeyB3aWR0aCB9ID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gIC8qKiBBcHBseSBvciByZW1vdmUgb3ZlcmZsb3cgc3R5bGUgKi9cbiAgaWYgKHByZXZlbnRTY3JvbGwpIHtcbiAgICBwcmV2aW91c092ZXJmbG93LnB1c2goZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdylcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbidcbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gcHJldmlvdXNPdmVyZmxvdy5wb3AoKSB8fCAnJ1xuICB9XG5cbiAgLyoqIEdldCB0aGUgX25ldyB3aWR0aF8gb2YgdGhlIGJvZHkgKHRoaXMgd2lsbCB0ZWxsIHVzIHRoZSBzY3JvbGxiYXIgd2lkdGgpICovXG4gIGNvbnN0IG5ld1dpZHRoID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aFxuICBjb25zdCBzY3JvbGxCYXJXaWR0aCA9IG5ld1dpZHRoIC0gd2lkdGhcblxuICAvKiogSWYgdGhlcmUncyBhIGRpZmYgZHVlIHRvIHNjcm9sbGJhcnMsIHRoZW4gYWNjb3VudCBmb3IgaXQgd2l0aCBwYWRkaW5nICovXG4gIGlmIChwcmV2ZW50U2Nyb2xsKSB7XG4gICAgcHJldmlvdXNQYWRkaW5nUmlnaHQucHVzaChkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodClcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCA9IE1hdGgubWF4KDAsIHNjcm9sbEJhcldpZHRoIHx8IDApICsgJ3B4J1xuICB9IGVsc2Uge1xuICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcHJldmlvdXNQYWRkaW5nUmlnaHQucG9wKCkgfHwgJydcbiAgfVxufVxuIl19