import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import Radio from '../src/Radio';
describe('Radio', function () {
  it('should not crash when rendering', function () {
    expect(function () {
      render( /*#__PURE__*/React.createElement(Radio, null));
    }).not.toThrowError();
  });
  it('should render the component', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      "data-testid": "test-id-radio"
    }));
    expect(screen.getByTestId('test-id-radio')).toBeVisible();
  });
  it('should render with an id when id is specified', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      id: "test-123"
    }));
    expect(screen.getByRole('radio').getAttribute('id')).toEqual('test-123');
  });
  it('should render with a name when name is specified', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      name: "test-name"
    }));
    expect(screen.getByRole('radio').getAttribute('name')).toEqual('test-name');
  });
  it('should render with a label when label is specified', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      label: "Select"
    }));
    expect(screen.getByLabelText('Select')).toBeInTheDocument();
  });
  it('should render with a value when value is specified', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      value: "test-value"
    }));
    expect(screen.getByRole('radio').getAttribute('value')).toEqual('test-value');
  });
  it('should render a disabled state when disabled is true', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      disabled: true
    }));
    expect(screen.getByRole('radio')).toBeDisabled();
  });
  it('should render a checked state when checked is true', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      checked: true
    }));
    expect(screen.getByRole('radio')).toBeChecked();
  });
  it('should render a required state when isRequired is true', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      isRequired: true
    }));
    expect(screen.getByRole('radio').required).toBeTruthy();
  });
  it('should render an invalid state when isInvalid is true', function () {
    render( /*#__PURE__*/React.createElement(Radio, {
      isInvalid: true
    }));
    expect(screen.getByRole('radio')).toBeInvalid();
  });
  it('should render a checked state when the radio is clicked', function () {
    render( /*#__PURE__*/React.createElement(Radio, null));
    var radio = screen.getByRole('radio');
    expect(screen.getByRole('radio')).not.toBeChecked();
    fireEvent.click(radio);
    expect(screen.getByRole('radio')).toBeChecked();
  });
  it('should handle state change when onChange is specified', function () {
    var onChangeMock = jest.fn();
    render( /*#__PURE__*/React.createElement(Radio, {
      onChange: onChangeMock
    }));
    var radio = screen.getByRole('radio');
    expect(onChangeMock).toBeCalledTimes(0);
    fireEvent.click(radio);
    expect(onChangeMock).toBeCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yYWRpby9fX3Rlc3RzX18vUmFkaW8udGVzdC5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsInNjcmVlbiIsImZpcmVFdmVudCIsIlJhZGlvIiwiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsIm5vdCIsInRvVGhyb3dFcnJvciIsImdldEJ5VGVzdElkIiwidG9CZVZpc2libGUiLCJnZXRCeVJvbGUiLCJnZXRBdHRyaWJ1dGUiLCJ0b0VxdWFsIiwiZ2V0QnlMYWJlbFRleHQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsInRvQmVEaXNhYmxlZCIsInRvQmVDaGVja2VkIiwicmVxdWlyZWQiLCJ0b0JlVHJ1dGh5IiwidG9CZUludmFsaWQiLCJyYWRpbyIsImNsaWNrIiwib25DaGFuZ2VNb2NrIiwiamVzdCIsImZuIiwidG9CZUNhbGxlZFRpbWVzIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsU0FBU0MsTUFBVCxFQUFpQkMsTUFBakIsRUFBeUJDLFNBQXpCLFFBQTBDLHdCQUExQztBQUNBLE9BQU9DLEtBQVAsTUFBa0IsY0FBbEI7QUFFQUMsUUFBUSxDQUFDLE9BQUQsRUFBVSxZQUFNO0FBQ3RCQyxFQUFBQSxFQUFFLENBQUMsaUNBQUQsRUFBb0MsWUFBTTtBQUMxQ0MsSUFBQUEsTUFBTSxDQUFDLFlBQU07QUFDWE4sTUFBQUEsTUFBTSxlQUFDLG9CQUFDLEtBQUQsT0FBRCxDQUFOO0FBQ0QsS0FGSyxDQUFOLENBRUdPLEdBRkgsQ0FFT0MsWUFGUDtBQUdELEdBSkMsQ0FBRjtBQU1BSCxFQUFBQSxFQUFFLENBQUMsNkJBQUQsRUFBZ0MsWUFBTTtBQUN0Q0wsSUFBQUEsTUFBTSxlQUFDLG9CQUFDLEtBQUQ7QUFBTyxxQkFBWTtBQUFuQixNQUFELENBQU47QUFDQU0sSUFBQUEsTUFBTSxDQUFDTCxNQUFNLENBQUNRLFdBQVAsQ0FBbUIsZUFBbkIsQ0FBRCxDQUFOLENBQTRDQyxXQUE1QztBQUNELEdBSEMsQ0FBRjtBQUtBTCxFQUFBQSxFQUFFLENBQUMsK0NBQUQsRUFBa0QsWUFBTTtBQUN4REwsSUFBQUEsTUFBTSxlQUFDLG9CQUFDLEtBQUQ7QUFBTyxNQUFBLEVBQUUsRUFBQztBQUFWLE1BQUQsQ0FBTjtBQUNBTSxJQUFBQSxNQUFNLENBQUNMLE1BQU0sQ0FBQ1UsU0FBUCxDQUFpQixPQUFqQixFQUEwQkMsWUFBMUIsQ0FBdUMsSUFBdkMsQ0FBRCxDQUFOLENBQXFEQyxPQUFyRCxDQUE2RCxVQUE3RDtBQUNELEdBSEMsQ0FBRjtBQUtBUixFQUFBQSxFQUFFLENBQUMsa0RBQUQsRUFBcUQsWUFBTTtBQUMzREwsSUFBQUEsTUFBTSxlQUFDLG9CQUFDLEtBQUQ7QUFBTyxNQUFBLElBQUksRUFBQztBQUFaLE1BQUQsQ0FBTjtBQUNBTSxJQUFBQSxNQUFNLENBQUNMLE1BQU0sQ0FBQ1UsU0FBUCxDQUFpQixPQUFqQixFQUEwQkMsWUFBMUIsQ0FBdUMsTUFBdkMsQ0FBRCxDQUFOLENBQXVEQyxPQUF2RCxDQUErRCxXQUEvRDtBQUNELEdBSEMsQ0FBRjtBQUtBUixFQUFBQSxFQUFFLENBQUMsb0RBQUQsRUFBdUQsWUFBTTtBQUM3REwsSUFBQUEsTUFBTSxlQUFDLG9CQUFDLEtBQUQ7QUFBTyxNQUFBLEtBQUssRUFBQztBQUFiLE1BQUQsQ0FBTjtBQUNBTSxJQUFBQSxNQUFNLENBQUNMLE1BQU0sQ0FBQ2EsY0FBUCxDQUFzQixRQUF0QixDQUFELENBQU4sQ0FBd0NDLGlCQUF4QztBQUNELEdBSEMsQ0FBRjtBQUtBVixFQUFBQSxFQUFFLENBQUMsb0RBQUQsRUFBdUQsWUFBTTtBQUM3REwsSUFBQUEsTUFBTSxlQUFDLG9CQUFDLEtBQUQ7QUFBTyxNQUFBLEtBQUssRUFBQztBQUFiLE1BQUQsQ0FBTjtBQUNBTSxJQUFBQSxNQUFNLENBQUNMLE1BQU0sQ0FBQ1UsU0FBUCxDQUFpQixPQUFqQixFQUEwQkMsWUFBMUIsQ0FBdUMsT0FBdkMsQ0FBRCxDQUFOLENBQXdEQyxPQUF4RCxDQUFnRSxZQUFoRTtBQUNELEdBSEMsQ0FBRjtBQUtBUixFQUFBQSxFQUFFLENBQUMsc0RBQUQsRUFBeUQsWUFBTTtBQUMvREwsSUFBQUEsTUFBTSxlQUFDLG9CQUFDLEtBQUQ7QUFBTyxNQUFBLFFBQVE7QUFBZixNQUFELENBQU47QUFDQU0sSUFBQUEsTUFBTSxDQUFDTCxNQUFNLENBQUNVLFNBQVAsQ0FBaUIsT0FBakIsQ0FBRCxDQUFOLENBQWtDSyxZQUFsQztBQUNELEdBSEMsQ0FBRjtBQUtBWCxFQUFBQSxFQUFFLENBQUMsb0RBQUQsRUFBdUQsWUFBTTtBQUM3REwsSUFBQUEsTUFBTSxlQUFDLG9CQUFDLEtBQUQ7QUFBTyxNQUFBLE9BQU87QUFBZCxNQUFELENBQU47QUFDQU0sSUFBQUEsTUFBTSxDQUFDTCxNQUFNLENBQUNVLFNBQVAsQ0FBaUIsT0FBakIsQ0FBRCxDQUFOLENBQWtDTSxXQUFsQztBQUNELEdBSEMsQ0FBRjtBQUtBWixFQUFBQSxFQUFFLENBQUMsd0RBQUQsRUFBMkQsWUFBTTtBQUNqRUwsSUFBQUEsTUFBTSxlQUFDLG9CQUFDLEtBQUQ7QUFBTyxNQUFBLFVBQVU7QUFBakIsTUFBRCxDQUFOO0FBQ0FNLElBQUFBLE1BQU0sQ0FBQ0wsTUFBTSxDQUFDVSxTQUFQLENBQWlCLE9BQWpCLEVBQTBCTyxRQUEzQixDQUFOLENBQTJDQyxVQUEzQztBQUNELEdBSEMsQ0FBRjtBQUtBZCxFQUFBQSxFQUFFLENBQUMsdURBQUQsRUFBMEQsWUFBTTtBQUNoRUwsSUFBQUEsTUFBTSxlQUFDLG9CQUFDLEtBQUQ7QUFBTyxNQUFBLFNBQVM7QUFBaEIsTUFBRCxDQUFOO0FBQ0FNLElBQUFBLE1BQU0sQ0FBQ0wsTUFBTSxDQUFDVSxTQUFQLENBQWlCLE9BQWpCLENBQUQsQ0FBTixDQUFrQ1MsV0FBbEM7QUFDRCxHQUhDLENBQUY7QUFLQWYsRUFBQUEsRUFBRSxDQUFDLHlEQUFELEVBQTRELFlBQU07QUFDbEVMLElBQUFBLE1BQU0sZUFBQyxvQkFBQyxLQUFELE9BQUQsQ0FBTjtBQUNBLFFBQU1xQixLQUFLLEdBQUdwQixNQUFNLENBQUNVLFNBQVAsQ0FBaUIsT0FBakIsQ0FBZDtBQUNBTCxJQUFBQSxNQUFNLENBQUNMLE1BQU0sQ0FBQ1UsU0FBUCxDQUFpQixPQUFqQixDQUFELENBQU4sQ0FBa0NKLEdBQWxDLENBQXNDVSxXQUF0QztBQUNBZixJQUFBQSxTQUFTLENBQUNvQixLQUFWLENBQWdCRCxLQUFoQjtBQUNBZixJQUFBQSxNQUFNLENBQUNMLE1BQU0sQ0FBQ1UsU0FBUCxDQUFpQixPQUFqQixDQUFELENBQU4sQ0FBa0NNLFdBQWxDO0FBQ0QsR0FOQyxDQUFGO0FBUUFaLEVBQUFBLEVBQUUsQ0FBQyx1REFBRCxFQUEwRCxZQUFNO0FBQ2hFLFFBQU1rQixZQUFZLEdBQUdDLElBQUksQ0FBQ0MsRUFBTCxFQUFyQjtBQUNBekIsSUFBQUEsTUFBTSxlQUFDLG9CQUFDLEtBQUQ7QUFBTyxNQUFBLFFBQVEsRUFBRXVCO0FBQWpCLE1BQUQsQ0FBTjtBQUVBLFFBQU1GLEtBQUssR0FBR3BCLE1BQU0sQ0FBQ1UsU0FBUCxDQUFpQixPQUFqQixDQUFkO0FBQ0FMLElBQUFBLE1BQU0sQ0FBQ2lCLFlBQUQsQ0FBTixDQUFxQkcsZUFBckIsQ0FBcUMsQ0FBckM7QUFDQXhCLElBQUFBLFNBQVMsQ0FBQ29CLEtBQVYsQ0FBZ0JELEtBQWhCO0FBQ0FmLElBQUFBLE1BQU0sQ0FBQ2lCLFlBQUQsQ0FBTixDQUFxQkcsZUFBckIsQ0FBcUMsQ0FBckM7QUFDRCxHQVJDLENBQUY7QUFTRCxDQXJFTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5pbXBvcnQgUmFkaW8gZnJvbSAnLi4vc3JjL1JhZGlvJ1xuXG5kZXNjcmliZSgnUmFkaW8nLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgbm90IGNyYXNoIHdoZW4gcmVuZGVyaW5nJywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICByZW5kZXIoPFJhZGlvIC8+KVxuICAgIH0pLm5vdC50b1Rocm93RXJyb3IoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHRoZSBjb21wb25lbnQnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxSYWRpbyBkYXRhLXRlc3RpZD1cInRlc3QtaWQtcmFkaW9cIiAvPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCd0ZXN0LWlkLXJhZGlvJykpLnRvQmVWaXNpYmxlKClcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJlbmRlciB3aXRoIGFuIGlkIHdoZW4gaWQgaXMgc3BlY2lmaWVkJywgKCkgPT4ge1xuICAgIHJlbmRlcig8UmFkaW8gaWQ9XCJ0ZXN0LTEyM1wiIC8+KVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdyYWRpbycpLmdldEF0dHJpYnV0ZSgnaWQnKSkudG9FcXVhbCgndGVzdC0xMjMnKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHdpdGggYSBuYW1lIHdoZW4gbmFtZSBpcyBzcGVjaWZpZWQnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxSYWRpbyBuYW1lPVwidGVzdC1uYW1lXCIgLz4pXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ3JhZGlvJykuZ2V0QXR0cmlidXRlKCduYW1lJykpLnRvRXF1YWwoJ3Rlc3QtbmFtZScpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgd2l0aCBhIGxhYmVsIHdoZW4gbGFiZWwgaXMgc3BlY2lmaWVkJywgKCkgPT4ge1xuICAgIHJlbmRlcig8UmFkaW8gbGFiZWw9XCJTZWxlY3RcIiAvPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5TGFiZWxUZXh0KCdTZWxlY3QnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHdpdGggYSB2YWx1ZSB3aGVuIHZhbHVlIGlzIHNwZWNpZmllZCcsICgpID0+IHtcbiAgICByZW5kZXIoPFJhZGlvIHZhbHVlPVwidGVzdC12YWx1ZVwiIC8+KVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdyYWRpbycpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgndGVzdC12YWx1ZScpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYSBkaXNhYmxlZCBzdGF0ZSB3aGVuIGRpc2FibGVkIGlzIHRydWUnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxSYWRpbyBkaXNhYmxlZCAvPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgncmFkaW8nKSkudG9CZURpc2FibGVkKClcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJlbmRlciBhIGNoZWNrZWQgc3RhdGUgd2hlbiBjaGVja2VkIGlzIHRydWUnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxSYWRpbyBjaGVja2VkIC8+KVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdyYWRpbycpKS50b0JlQ2hlY2tlZCgpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYSByZXF1aXJlZCBzdGF0ZSB3aGVuIGlzUmVxdWlyZWQgaXMgdHJ1ZScsICgpID0+IHtcbiAgICByZW5kZXIoPFJhZGlvIGlzUmVxdWlyZWQgLz4pXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ3JhZGlvJykucmVxdWlyZWQpLnRvQmVUcnV0aHkoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGFuIGludmFsaWQgc3RhdGUgd2hlbiBpc0ludmFsaWQgaXMgdHJ1ZScsICgpID0+IHtcbiAgICByZW5kZXIoPFJhZGlvIGlzSW52YWxpZCAvPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgncmFkaW8nKSkudG9CZUludmFsaWQoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGEgY2hlY2tlZCBzdGF0ZSB3aGVuIHRoZSByYWRpbyBpcyBjbGlja2VkJywgKCkgPT4ge1xuICAgIHJlbmRlcig8UmFkaW8gLz4pXG4gICAgY29uc3QgcmFkaW8gPSBzY3JlZW4uZ2V0QnlSb2xlKCdyYWRpbycpXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ3JhZGlvJykpLm5vdC50b0JlQ2hlY2tlZCgpXG4gICAgZmlyZUV2ZW50LmNsaWNrKHJhZGlvKVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdyYWRpbycpKS50b0JlQ2hlY2tlZCgpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgc3RhdGUgY2hhbmdlIHdoZW4gb25DaGFuZ2UgaXMgc3BlY2lmaWVkJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uQ2hhbmdlTW9jayA9IGplc3QuZm4oKVxuICAgIHJlbmRlcig8UmFkaW8gb25DaGFuZ2U9e29uQ2hhbmdlTW9ja30gLz4pXG5cbiAgICBjb25zdCByYWRpbyA9IHNjcmVlbi5nZXRCeVJvbGUoJ3JhZGlvJylcbiAgICBleHBlY3Qob25DaGFuZ2VNb2NrKS50b0JlQ2FsbGVkVGltZXMoMClcbiAgICBmaXJlRXZlbnQuY2xpY2socmFkaW8pXG4gICAgZXhwZWN0KG9uQ2hhbmdlTW9jaykudG9CZUNhbGxlZFRpbWVzKDEpXG4gIH0pXG59KVxuIl19