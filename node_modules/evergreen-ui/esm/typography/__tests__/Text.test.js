import React from 'react';
import { render } from '@testing-library/react';
import faker from 'faker';
import renderer from 'react-test-renderer';
import { UIBoxSerializer } from '../../../lib/testing';
import { ThemeProvider } from '../../theme';
import { defaultTheme } from '../../themes';
import Text from '../src/Text';
expect.addSnapshotSerializer(UIBoxSerializer);
test.each([['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600]])('<Text /> %s renders as expected', function (_, size) {
  var component = /*#__PURE__*/React.createElement(ThemeProvider, {
    value: defaultTheme
  }, /*#__PURE__*/React.createElement(Text, {
    size: size
  }, "Text ".concat(size)));
  var tree = renderer.create(component).toJSON();
  expect(tree).toMatchSnapshot();
});
describe('Colors', function () {
  test('<Text /> accepts arbitrary theme values for color', function () {
    var component = /*#__PURE__*/React.createElement(ThemeProvider, {
      value: defaultTheme
    }, /*#__PURE__*/React.createElement(Text, {
      color: "muted"
    }, "Testing"), ' ');
    var tree = renderer.create(component).toJSON();
    expect(tree).toMatchSnapshot();
  });
  test('<Text /> does not render any color when a non-theme color is passed in ', function () {
    var component = /*#__PURE__*/React.createElement(ThemeProvider, {
      value: defaultTheme
    }, /*#__PURE__*/React.createElement(Text, {
      color: "SOMETHING DOESNT EXISt"
    }, "Testing"), ' ');
    var tree = renderer.create(component).toJSON();
    expect(tree).toMatchSnapshot();
  });
});
describe('Sizing', function () {
  var originalConsoleError = console.error;
  var mockFn = jest.fn();
  beforeEach(function () {
    console.error = mockFn;
  });
  afterEach(function () {
    console.error = originalConsoleError;
  });
  test('<Text /> has undefined behavior when trying to set arbitrary sizes', function () {
    render( /*#__PURE__*/React.createElement(Text, {
      size: 800
    }));
    expect(mockFn.mock.calls.length).toEqual(1);
    expect(mockFn.mock.calls[0][0]).toMatchInlineSnapshot("\n      Extracted Styles:\n      box-sizing: border-box;\n      color: #474d66;\n      font-family: \"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n\n\n      \"Warning: Failed %s type: %s%s\"\n    ");
  });
});
describe('Props', function () {
  it('should forward `className` prop', function () {
    var expected = faker.random.word().toLowerCase();
    var component = /*#__PURE__*/React.createElement(Text, {
      "data-testid": "text",
      className: expected
    }, "Testing");

    var _render = render(component),
        getByTestId = _render.getByTestId;

    expect(getByTestId('text')).toHaveClass(expected);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90eXBvZ3JhcGh5L19fdGVzdHNfXy9UZXh0LnRlc3QuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZW5kZXIiLCJmYWtlciIsInJlbmRlcmVyIiwiVUlCb3hTZXJpYWxpemVyIiwiVGhlbWVQcm92aWRlciIsImRlZmF1bHRUaGVtZSIsIlRleHQiLCJleHBlY3QiLCJhZGRTbmFwc2hvdFNlcmlhbGl6ZXIiLCJ0ZXN0IiwiZWFjaCIsIl8iLCJzaXplIiwiY29tcG9uZW50IiwidHJlZSIsImNyZWF0ZSIsInRvSlNPTiIsInRvTWF0Y2hTbmFwc2hvdCIsImRlc2NyaWJlIiwib3JpZ2luYWxDb25zb2xlRXJyb3IiLCJjb25zb2xlIiwiZXJyb3IiLCJtb2NrRm4iLCJqZXN0IiwiZm4iLCJiZWZvcmVFYWNoIiwiYWZ0ZXJFYWNoIiwibW9jayIsImNhbGxzIiwibGVuZ3RoIiwidG9FcXVhbCIsInRvTWF0Y2hJbmxpbmVTbmFwc2hvdCIsIml0IiwiZXhwZWN0ZWQiLCJyYW5kb20iLCJ3b3JkIiwidG9Mb3dlckNhc2UiLCJnZXRCeVRlc3RJZCIsInRvSGF2ZUNsYXNzIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsU0FBU0MsTUFBVCxRQUF1Qix3QkFBdkI7QUFDQSxPQUFPQyxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQixxQkFBckI7QUFDQSxTQUFTQyxlQUFULFFBQWdDLHNCQUFoQztBQUNBLFNBQVNDLGFBQVQsUUFBOEIsYUFBOUI7QUFDQSxTQUFTQyxZQUFULFFBQTZCLGNBQTdCO0FBQ0EsT0FBT0MsSUFBUCxNQUFpQixhQUFqQjtBQUVBQyxNQUFNLENBQUNDLHFCQUFQLENBQTZCTCxlQUE3QjtBQUVBTSxJQUFJLENBQUNDLElBQUwsQ0FBVSxDQUNSLENBQUMsVUFBRCxFQUFhLEdBQWIsQ0FEUSxFQUVSLENBQUMsVUFBRCxFQUFhLEdBQWIsQ0FGUSxFQUdSLENBQUMsVUFBRCxFQUFh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RUFBRW9CO0FBQXBDLGlCQURGOztBQUtBLGtCQUF3QmpDLE1BQU0sQ0FBQ2EsU0FBRCxDQUE5QjtBQUFBLFFBQVF3QixXQUFSLFdBQVFBLFdBQVI7O0FBQ0E5QixJQUFBQSxNQUFNLENBQUM4QixXQUFXLENBQUMsTUFBRCxDQUFaLENBQU4sQ0FBNEJDLFdBQTVCLENBQXdDTCxRQUF4QztBQUNELEdBVEMsQ0FBRjtBQVVELENBWE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5pbXBvcnQgZmFrZXIgZnJvbSAnZmFrZXInXG5pbXBvcnQgcmVuZGVyZXIgZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcidcbmltcG9ydCB7IFVJQm94U2VyaWFsaXplciB9IGZyb20gJy4uLy4uLy4uL2xpYi90ZXN0aW5nJ1xuaW1wb3J0IHsgVGhlbWVQcm92aWRlciB9IGZyb20gJy4uLy4uL3RoZW1lJ1xuaW1wb3J0IHsgZGVmYXVsdFRoZW1lIH0gZnJvbSAnLi4vLi4vdGhlbWVzJ1xuaW1wb3J0IFRleHQgZnJvbSAnLi4vc3JjL1RleHQnXG5cbmV4cGVjdC5hZGRTbmFwc2hvdFNlcmlhbGl6ZXIoVUlCb3hTZXJpYWxpemVyKVxuXG50ZXN0LmVhY2goW1xuICBbJ3NpemUgMzAwJywgMzAwXSxcbiAgWydzaXplIDQwMCcsIDQwMF0sXG4gIFsnc2l6ZSA1MDAnLCA1MDBdLFxuICBbJ3NpemUgNjAwJywgNjAwXVxuXSkoJzxUZXh0IC8+ICVzIHJlbmRlcnMgYXMgZXhwZWN0ZWQnLCAoXywgc2l6ZSkgPT4ge1xuICBjb25zdCBjb21wb25lbnQgPSAoXG4gICAgPFRoZW1lUHJvdmlkZXIgdmFsdWU9e2RlZmF1bHRUaGVtZX0+XG4gICAgICA8VGV4dCBzaXplPXtzaXplfT57YFRleHQgJHtzaXplfWB9PC9UZXh0PlxuICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgKVxuICBjb25zdCB0cmVlID0gcmVuZGVyZXIuY3JlYXRlKGNvbXBvbmVudCkudG9KU09OKClcbiAgZXhwZWN0KHRyZWUpLnRvTWF0Y2hTbmFwc2hvdCgpXG59KVxuXG5kZXNjcmliZSgnQ29sb3JzJywgKCkgPT4ge1xuICB0ZXN0KCc8VGV4dCAvPiBhY2NlcHRzIGFyYml0cmFyeSB0aGVtZSB2YWx1ZXMgZm9yIGNvbG9yJywgKCkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IChcbiAgICAgIDxUaGVtZVByb3ZpZGVyIHZhbHVlPXtkZWZhdWx0VGhlbWV9PlxuICAgICAgICA8VGV4dCBjb2xvcj1cIm11dGVkXCI+VGVzdGluZzwvVGV4dD57JyAnfVxuICAgICAgPC9UaGVtZVByb3ZpZGVyPlxuICAgIClcbiAgICBjb25zdCB0cmVlID0gcmVuZGVyZXIuY3JlYXRlKGNvbXBvbmVudCkudG9KU09OKClcbiAgICBleHBlY3QodHJlZSkudG9NYXRjaFNuYXBzaG90KClcbiAgfSlcblxuICB0ZXN0KCc8VGV4dCAvPiBkb2VzIG5vdCByZW5kZXIgYW55IGNvbG9yIHdoZW4gYSBub24tdGhlbWUgY29sb3IgaXMgcGFzc2VkIGluICcsICgpID0+IHtcbiAgICBjb25zdCBjb21wb25lbnQgPSAoXG4gICAgICA8VGhlbWVQcm92aWRlciB2YWx1ZT17ZGVmYXVsdFRoZW1lfT5cbiAgICAgICAgPFRleHQgY29sb3I9XCJTT01FVEhJTkcgRE9FU05UIEVYSVN0XCI+VGVzdGluZzwvVGV4dD57JyAnfVxuICAgICAgPC9UaGVtZVByb3ZpZGVyPlxuICAgIClcbiAgICBjb25zdCB0cmVlID0gcmVuZGVyZXIuY3JlYXRlKGNvbXBvbmVudCkudG9KU09OKClcbiAgICBleHBlY3QodHJlZSkudG9NYXRjaFNuYXBzaG90KClcbiAgfSlcbn0pXG5cbmRlc2NyaWJlKCdTaXppbmcnLCAoKSA9PiB7XG4gIGNvbnN0IG9yaWdpbmFsQ29uc29sZUVycm9yID0gY29uc29sZS5lcnJvclxuICBjb25zdCBtb2NrRm4gPSBqZXN0LmZuKClcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgY29uc29sZS5lcnJvciA9IG1vY2tGblxuICB9KVxuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgY29uc29sZS5lcnJvciA9IG9yaWdpbmFsQ29uc29sZUVycm9yXG4gIH0pXG5cbiAgdGVzdCgnPFRleHQgLz4gaGFzIHVuZGVmaW5lZCBiZWhhdmlvciB3aGVuIHRyeWluZyB0byBzZXQgYXJiaXRyYXJ5IHNpemVzJywgKCkgPT4ge1xuICAgIHJlbmRlcig8VGV4dCBzaXplPXs4MDB9IC8+KVxuICAgIGV4cGVjdChtb2NrRm4ubW9jay5jYWxscy5sZW5ndGgpLnRvRXF1YWwoMSlcbiAgICBleHBlY3QobW9ja0ZuLm1vY2suY2FsbHNbMF1bMF0pLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChgXG4gICAgICBFeHRyYWN0ZWQgU3R5bGVzOlxuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgIGNvbG9yOiAjNDc0ZDY2O1xuICAgICAgZm9udC1mYW1pbHk6IFwiU0YgVUkgVGV4dFwiLCAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFwiU2Vnb2UgVUlcIiwgUm9ib3RvLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmLCBcIkFwcGxlIENvbG9yIEVtb2ppXCIsIFwiU2Vnb2UgVUkgRW1vamlcIiwgXCJTZWdvZSBVSSBTeW1ib2xcIjtcblxuXG4gICAgICBcIldhcm5pbmc6IEZhaWxlZCAlcyB0eXBlOiAlcyVzXCJcbiAgICBgKVxuICB9KVxufSlcblxuZGVzY3JpYmUoJ1Byb3BzJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGZvcndhcmQgYGNsYXNzTmFtZWAgcHJvcCcsICgpID0+IHtcbiAgICBjb25zdCBleHBlY3RlZCA9IGZha2VyLnJhbmRvbS53b3JkKCkudG9Mb3dlckNhc2UoKVxuICAgIGNvbnN0IGNvbXBvbmVudCA9IChcbiAgICAgIDxUZXh0IGRhdGEtdGVzdGlkPVwidGV4dFwiIGNsYXNzTmFtZT17ZXhwZWN0ZWR9PlxuICAgICAgICBUZXN0aW5nXG4gICAgICA8L1RleHQ+XG4gICAgKVxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihjb21wb25lbnQpXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCd0ZXh0JykpLnRvSGF2ZUNsYXNzKGV4cGVjdGVkKVxuICB9KVxufSlcbiJdfQ==