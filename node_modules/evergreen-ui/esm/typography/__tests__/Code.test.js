import React from 'react';
import { render } from '@testing-library/react';
import faker from 'faker';
import renderer from 'react-test-renderer';
import { UIBoxSerializer } from '../../../lib/testing';
import { ThemeProvider } from '../../theme';
import { defaultTheme } from '../../themes';
import Code from '../src/Code';
expect.addSnapshotSerializer(UIBoxSerializer);
describe('Code', function () {
  it('Should render', function () {
    expect(function () {
      return render( /*#__PURE__*/React.createElement(Code, null, "This is my code"));
    }).not.toThrow();
  });
  it.each([['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600]])('<Code /> %s renders as expected', function (_, size) {
    var component = /*#__PURE__*/React.createElement(ThemeProvider, {
      value: defaultTheme
    }, /*#__PURE__*/React.createElement(Code, {
      size: size
    }, "Text ".concat(size)));
    var tree = renderer.create(component).toJSON();
    expect(tree).toMatchSnapshot();
  });
  it.each([['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600]])('<Code /> %s with minimal appearance specified renders as expected', function (_, size) {
    var component = /*#__PURE__*/React.createElement(ThemeProvider, {
      value: defaultTheme
    }, /*#__PURE__*/React.createElement(Code, {
      size: size,
      appearance: "minimal"
    }, "Text ".concat(size)));
    var tree = renderer.create(component).toJSON();
    expect(tree).toMatchSnapshot();
  });
  it('should pass through `className` prop', function () {
    var expected = faker.random.word().toLowerCase();
    var component = /*#__PURE__*/React.createElement(Code, {
      "data-testid": "code",
      className: expected
    }, "Testing");

    var _render = render(component),
        getByTestId = _render.getByTestId;

    expect(getByTestId('code')).toHaveClass(expected);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90eXBvZ3JhcGh5L19fdGVzdHNfXy9Db2RlLnRlc3QuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZW5kZXIiLCJmYWtlciIsInJlbmRlcmVyIiwiVUlCb3hTZXJpYWxpemVyIiwiVGhlbWVQcm92aWRlciIsImRlZmF1bHRUaGVtZSIsIkNvZGUiLCJleHBlY3QiLCJhZGRTbmFwc2hvdFNlcmlhbGl6ZXIiLCJkZXNjcmliZSIsIml0Iiwibm90IiwidG9UaHJvdyIsImVhY2giLCJfIiwic2l6ZSIsImNvbXBvbmVudCIsInRyZWUiLCJjcmVhdGUiLCJ0b0pTT04iLCJ0b01hdGNoU25hcHNob3QiLCJleHBlY3RlZCIsInJhbmRvbSIsIndvcmQiLCJ0b0xvd2VyQ2FzZSIsImdldEJ5VGVzdElkIiwidG9IYXZlQ2xhc3MiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxTQUFTQyxNQUFULFFBQXVCLHdCQUF2QjtBQUNBLE9BQU9DLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLHFCQUFyQjtBQUNBLFNBQVNDLGVBQVQsUUFBZ0Msc0JBQWhDO0FBQ0EsU0FBU0MsYUFBVCxRQUE4QixhQUE5QjtBQUNBLFNBQVNDLFlBQVQsUUFBNkIsY0FBN0I7QUFDQSxPQUFPQyxJQUFQLE1BQWlCLGFBQWpCO0FBRUFDLE1BQU0sQ0FBQ0MscUJBQVAsQ0FBNkJMLGVBQTdCO0FBRUFNLFFBQVEsQ0FBQyxNQUFELEVBQVMsWUFBTTtBQUNyQkMsRUFBQUEsRUFBRSxDQUFDLGVBQUQsRUFBa0IsWUFBTTtBQUN4QkgsSUFBQUEsTUFBTSxDQUFDO0FBQUEsYUFBTVAsTUFBTSxlQUFDLG9CQUFDLElBQUQsMEJBQUQsQ0FBWjtBQUFBLEtBQUQsQ0FBTixDQUFtRFcsR0FBbkQsQ0FBdURDLE9BQXZEO0FBQ0QsR0FGQyxDQUFGO0FBSUFGLEVBQUFBLEVBQUUsQ0FBQ0csSUFBSCxDQUFRLENBQ04sQ0FBQyxVQUFELEVBQWEsR0FBYixDQURNLEVBRU4sQ0FBQyxVQUFELEVBQWEsR0FBYixDQUZNLEVBR04sQ0FBQyxVQUFELEVBQWEsR0FBYixDQUhNLEVBSU4sQ0FBQyxVQUFELEVBQWEsR0FBYixDQUpNLENBQVIsRUFLRyxpQ0FMSCxFQUtzQyxVQUFDQyxDQUFELEVBQUlDLElBQUosRUFBYTtBQUNqRCxRQUFNQyxTQUFTLGdCQUNiLG9CQUFDLGFBQUQ7QUFBZSxNQUFBLEtBQUssRUFBRVg7QUFBdEIsb0JBQ0Usb0JBQUMsSUFBRDtBQUFNLE1BQUEsSUFBSSxFQUFFVTtBQUFaLHNCQUEyQkEsSUFBM0IsRUFERixDQURGO0FBS0EsUUFBTUUsSUFBSSxHQUFHZixRQUFRLENBQUNnQixNQUFULENBQWdCRixTQUFoQixFQUEyQkcsTUFBM0IsRUFBYjtBQUNBWixJQUFBQSxNQUFNLENBQUNVLElBQUQsQ0FBTixDQUFhRyxlQUFiO0FBQ0QsR0FiRDtBQWVBVixFQUFBQSxFQUFFLENBQUNHLElBQUgsQ0FBUSxDQUNOLENBQUMsVUFBRCxFQUFhLEdBQWIsQ0FETSxFQUVOLENBQUMsVUFBRCxFQUFhLEdBQWIsQ0FGTSxFQUdOLENBQUMsVUFBRCxFQUFhLEdBQWIsQ0FITSxFQUlOLENBQUMsVUFBRCxFQUFhLEdBQWIsQ0FKTSxDQUFSLEVBS0csbUVBTEgsRUFLd0UsVUFBQ0MsQ0FBRCxFQUFJQyxJQUFKLEVBQWE7QUFDbkYsUUFBTUMsU0FBUyxnQkFDYixvQkFBQyxhQUFEO0FBQWUsTUFBQSxLQUFLLEVBQUVYO0FBQXRCLG9CQUNFLG9CQUFDLElBQUQ7QUFBTSxNQUFBLElBQUksRUFBRVUsSUFBWjtBQUFrQixNQUFBLFVBQVUsRUFBQztBQUE3QixzQkFBZ0RBLElBQWhELEVBREYsQ0FERjtBQUtBLFFBQU1FLElBQUksR0FBR2YsUUFBUSxDQUFDZ0IsTUFBVCxDQUFnQkYsU0FBaEIsRUFBMkJHLE1BQTNCLEVBQWI7QUFDQVosSUFBQUEsTUFBTSxDQUFDVSxJQUFELENBQU4sQ0FBYUcsZUFBYjtBQUNELEdBYkQ7QUFlQVYsRUFBQUEsRUFBRSxDQUFDLHNDQUFELEVBQXlDLFlBQU07QUFDL0MsUUFBTVcsUUFBUSxHQUFHcEIsS0FBSyxDQUFDcUIsTUFBTixDQUFhQyxJQUFiLEdBQW9CQyxXQUFwQixFQUFqQjtBQUNBLFFBQU1SLFNBQVMsZ0JBQ2Isb0JBQUMsSUFBRDtBQUFNLHFCQUFZLE1BQWxCO0FBQXlCLE1BQUEsU0FBUyxFQUFFSztBQUFwQyxpQkFERjs7QUFLQSxrQkFBd0JyQixNQUFNLENBQUNnQixTQUFELENBQTlCO0FBQUEsUUFBUVMsV0FBUixXQUFRQSxXQUFSOztBQUNBbEIsSUFBQUEsTUFBTSxDQUFDa0IsV0FBVyxDQUFDLE1BQUQsQ0FBWixDQUFOLENBQTRCQyxXQUE1QixDQUF3Q0wsUUFBeEM7QUFDRCxHQVRDLENBQUY7QUFVRCxDQTdDTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCdcbmltcG9ydCBmYWtlciBmcm9tICdmYWtlcidcbmltcG9ydCByZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJ1xuaW1wb3J0IHsgVUlCb3hTZXJpYWxpemVyIH0gZnJvbSAnLi4vLi4vLi4vbGliL3Rlc3RpbmcnXG5pbXBvcnQgeyBUaGVtZVByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vdGhlbWUnXG5pbXBvcnQgeyBkZWZhdWx0VGhlbWUgfSBmcm9tICcuLi8uLi90aGVtZXMnXG5pbXBvcnQgQ29kZSBmcm9tICcuLi9zcmMvQ29kZSdcblxuZXhwZWN0LmFkZFNuYXBzaG90U2VyaWFsaXplcihVSUJveFNlcmlhbGl6ZXIpXG5cbmRlc2NyaWJlKCdDb2RlJywgKCkgPT4ge1xuICBpdCgnU2hvdWxkIHJlbmRlcicsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4gcmVuZGVyKDxDb2RlPlRoaXMgaXMgbXkgY29kZTwvQ29kZT4pKS5ub3QudG9UaHJvdygpXG4gIH0pXG5cbiAgaXQuZWFjaChbXG4gICAgWydzaXplIDMwMCcsIDMwMF0sXG4gICAgWydzaXplIDQwMCcsIDQwMF0sXG4gICAgWydzaXplIDUwMCcsIDUwMF0sXG4gICAgWydzaXplIDYwMCcsIDYwMF1cbiAgXSkoJzxDb2RlIC8+ICVzIHJlbmRlcnMgYXMgZXhwZWN0ZWQnLCAoXywgc2l6ZSkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IChcbiAgICAgIDxUaGVtZVByb3ZpZGVyIHZhbHVlPXtkZWZhdWx0VGhlbWV9PlxuICAgICAgICA8Q29kZSBzaXplPXtzaXplfT57YFRleHQgJHtzaXplfWB9PC9Db2RlPlxuICAgICAgPC9UaGVtZVByb3ZpZGVyPlxuICAgIClcbiAgICBjb25zdCB0cmVlID0gcmVuZGVyZXIuY3JlYXRlKGNvbXBvbmVudCkudG9KU09OKClcbiAgICBleHBlY3QodHJlZSkudG9NYXRjaFNuYXBzaG90KClcbiAgfSlcblxuICBpdC5lYWNoKFtcbiAgICBbJ3NpemUgMzAwJywgMzAwXSxcbiAgICBbJ3NpemUgNDAwJywgNDAwXSxcbiAgICBbJ3NpemUgNTAwJywgNTAwXSxcbiAgICBbJ3NpemUgNjAwJywgNjAwXVxuICBdKSgnPENvZGUgLz4gJXMgd2l0aCBtaW5pbWFsIGFwcGVhcmFuY2Ugc3BlY2lmaWVkIHJlbmRlcnMgYXMgZXhwZWN0ZWQnLCAoXywgc2l6ZSkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IChcbiAgICAgIDxUaGVtZVByb3ZpZGVyIHZhbHVlPXtkZWZhdWx0VGhlbWV9PlxuICAgICAgICA8Q29kZSBzaXplPXtzaXplfSBhcHBlYXJhbmNlPVwibWluaW1hbFwiPntgVGV4dCAke3NpemV9YH08L0NvZGU+XG4gICAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICAgKVxuICAgIGNvbnN0IHRyZWUgPSByZW5kZXJlci5jcmVhdGUoY29tcG9uZW50KS50b0pTT04oKVxuICAgIGV4cGVjdCh0cmVlKS50b01hdGNoU25hcHNob3QoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcGFzcyB0aHJvdWdoIGBjbGFzc05hbWVgIHByb3AnLCAoKSA9PiB7XG4gICAgY29uc3QgZXhwZWN0ZWQgPSBmYWtlci5yYW5kb20ud29yZCgpLnRvTG93ZXJDYXNlKClcbiAgICBjb25zdCBjb21wb25lbnQgPSAoXG4gICAgICA8Q29kZSBkYXRhLXRlc3RpZD1cImNvZGVcIiBjbGFzc05hbWU9e2V4cGVjdGVkfT5cbiAgICAgICAgVGVzdGluZ1xuICAgICAgPC9Db2RlPlxuICAgIClcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoY29tcG9uZW50KVxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnY29kZScpKS50b0hhdmVDbGFzcyhleHBlY3RlZClcbiAgfSlcbn0pXG4iXX0=