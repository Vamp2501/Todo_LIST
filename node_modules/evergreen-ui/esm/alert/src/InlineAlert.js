import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["children", "className", "hasIcon", "intent", "size"],
    _excluded2 = ["className"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { memo, forwardRef } from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import { spacing, dimensions, position, layout } from 'ui-box';
import { useStyleConfig } from '../../hooks';
import { Pane } from '../../layers';
import { Text } from '../../typography';
import { getIconForIntent } from './getIconForIntent';
var pseudoSelectors = {};
var internalStyles = {
  display: 'flex',
  alignItems: 'center'
};
var InlineAlert = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function InlineAlert(props, ref) {
  var children = props.children,
      className = props.className,
      _props$hasIcon = props.hasIcon,
      hasIcon = _props$hasIcon === void 0 ? true : _props$hasIcon,
      _props$intent = props.intent,
      intent = _props$intent === void 0 ? 'info' : _props$intent,
      _props$size = props.size,
      size = _props$size === void 0 ? 400 : _props$size,
      restProps = _objectWithoutProperties(props, _excluded);

  var intentToken = intent === 'none' ? 'info' : intent;

  var _useStyleConfig = useStyleConfig('InlineAlert', {
    intent: intentToken
  }, pseudoSelectors, internalStyles),
      themedClassName = _useStyleConfig.className,
      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);

  return /*#__PURE__*/React.createElement(Pane, _extends({
    ref: ref,
    className: cx(className, themedClassName)
  }, styleProps, restProps), hasIcon && /*#__PURE__*/React.createElement(Pane, {
    display: "flex",
    marginRight: 16
  }, getIconForIntent(intent, {
    size: 16
  })), /*#__PURE__*/React.createElement(Text, {
    size: size,
    lineHeight: 1,
    fontWeight: 500,
    color: "inherit"
  }, children));
}));
InlineAlert.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, spacing.propTypes), position.propTypes), layout.propTypes), dimensions.propTypes), {}, {
  /**
   * The content of the alert.
   */
  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),

  /**
   * The intent of the alert. This should always be set explicitly.
   */
  intent: PropTypes.string,

  /**
   * When true, show a icon on the left matching the type.
   * There is no point not showing this.
   */
  hasIcon: PropTypes.bool,

  /**
   * The size of the Text.
   */
  size: PropTypes.number
});
export default InlineAlert;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbGVydC9zcmMvSW5saW5lQWxlcnQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJtZW1vIiwiZm9yd2FyZFJlZiIsImN4IiwiUHJvcFR5cGVzIiwic3BhY2luZyIsImRpbWVuc2lvbnMiLCJwb3NpdGlvbiIsImxheW91dCIsInVzZVN0eWxlQ29uZmlnIiwiUGFuZSIsIlRleHQiLCJnZXRJY29uRm9ySW50ZW50IiwicHNldWRvU2VsZWN0b3JzIiwiaW50ZXJuYWxTdHlsZXMiLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsIklubGluZUFsZXJ0IiwicHJvcHMiLCJyZWYiLCJjaGlsZHJlbiIsImNsYXNzTmFtZSIsImhhc0ljb24iLCJpbnRlbnQiLCJzaXplIiwicmVzdFByb3BzIiwiaW50ZW50VG9rZW4iLCJ0aGVtZWRDbGFzc05hbWUiLCJzdHlsZVByb3BzIiwicHJvcFR5cGVzIiwib25lT2ZUeXBlIiwic3RyaW5nIiwibm9kZSIsImJvb2wiLCJudW1iZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxJQUFoQixFQUFzQkMsVUFBdEIsUUFBd0MsT0FBeEM7QUFDQSxPQUFPQyxFQUFQLE1BQWUsWUFBZjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxTQUFTQyxPQUFULEVBQWtCQyxVQUFsQixFQUE4QkMsUUFBOUIsRUFBd0NDLE1BQXhDLFFBQXNELFFBQXREO0FBQ0EsU0FBU0MsY0FBVCxRQUErQixhQUEvQjtBQUNBLFNBQVNDLElBQVQsUUFBcUIsY0FBckI7QUFDQSxTQUFTQyxJQUFULFFBQXFCLGtCQUFyQjtBQUNBLFNBQVNDLGdCQUFULFFBQWlDLG9CQUFqQztBQUVBLElBQU1DLGVBQWUsR0FBRyxFQUF4QjtBQUVBLElBQU1DLGNBQWMsR0FBRztBQUNyQkMsRUFBQUEsT0FBTyxFQUFFLE1BRFk7QUFFckJDLEVBQUFBLFVBQVUsRUFBRTtBQUZTLENBQXZCO0FBS0EsSUFBTUMsV0FBVyxnQkFBR2hCLElBQUksZUFDdEJDLFVBQVUsQ0FBQyxTQUFTZSxXQUFULENBQXFCQyxLQUFyQixFQUE0QkMsR0FBNUIsRUFBaUM7QUFDMUMsTUFBUUMsUUFBUixHQUEyRkYsS0FBM0YsQ0FBUUUsUUFBUjtBQUFBLE1BQWtCQyxTQUFsQixHQUEyRkgsS0FBM0YsQ0FBa0JHLFNBQWxCO0FBQUEsdUJBQTJGSCxLQUEzRixDQUE2QkksT0FBN0I7QUFBQSxNQUE2QkEsT0FBN0IsK0JBQXVDLElBQXZDO0FBQUEsc0JBQTJGSixLQUEzRixDQUE2Q0ssTUFBN0M7QUFBQSxNQUE2Q0EsTUFBN0MsOEJBQXNELE1BQXREO0FBQUEsb0JBQTJGTCxLQUEzRixDQUE4RE0sSUFBOUQ7QUFBQSxNQUE4REEsSUFBOUQsNEJBQXFFLEdBQXJFO0FBQUEsTUFBNkVDLFNBQTdFLDRCQUEyRlAsS0FBM0Y7O0FBRUEsTUFBTVEsV0FBVyxHQUFHSCxNQUFNLEtBQUssTUFBWCxHQUFvQixNQUFwQixHQUE2QkEsTUFBakQ7O0FBQ0Esd0JBQXNEZCxjQUFjLENBQ2xFLGFBRGtFLEVBRWxFO0FBQUVjLElBQUFBLE1BQU0sRUFBRUc7QUFBVixHQUZrRSxFQUdsRWIsZUFIa0UsRUFJbEVDLGNBSmtFLENBQXBFO0FBQUEsTUFBbUJhLGVBQW5CLG1CQUFRTixTQUFSO0FBQUEsTUFBdUNPLFVBQXZDOztBQU9BLHNCQUNFLG9CQUFDLElBQUQ7QUFBTSxJQUFBLEdBQUcsRUFBRVQsR0FBWDtBQUFnQixJQUFBLFNBQVMsRUFBRWhCLEVBQUUsQ0FBQ2tCLFNBQUQsRUFBWU0sZUFBWjtBQUE3QixLQUErREMsVUFBL0QsRUFBK0VILFNBQS9FLEdBQ0dILE9BQU8saUJBQ04sb0JBQUMsSUFBRDtBQUFNLElBQUEsT0FBTyxFQUFDLE1BQWQ7QUFBcUIsSUFBQSxXQUFXLEVBQUU7QUFBbEMsS0FDR1YsZ0JBQWdCLENBQUNXLE1BQUQsRUFBUztBQUFFQyxJQUFBQSxJQUFJLEVBQUU7QUFBUixHQUFULENBRG5CLENBRkosZUFNRSxvQkFBQyxJQUFEO0FBQU0sSUFBQSxJQUFJLEVBQUVBLElBQVo7QUFBa0IsSUFBQSxVQUFVLEVBQUUsQ0FBOUI7QUFBaUMsSUFBQSxVQUFVLEVBQUUsR0FBN0M7QUFBa0QsSUFBQSxLQUFLLEVBQUM7QUFBeEQsS0FDR0osUUFESCxDQU5GLENBREY7QUFZRCxDQXZCUyxDQURZLENBQXhCO0FBMkJBSCxXQUFXLENBQUNZLFNBQVosNkVBSUt4QixPQUFPLENBQUN3QixTQUpiLEdBS0t0QixRQUFRLENBQUNzQixTQUxkLEdBTUtyQixNQUFNLENBQUNxQixTQU5aLEdBT0t2QixVQUFVLENBQUN1QixTQVBoQjtBQVNFO0FBQ0Y7QUFDQTtBQUNFVCxFQUFBQSxRQUFRLEVBQUVoQixTQUFTLENBQUMwQixTQUFWLENBQW9CLENBQUMxQixTQUFTLENBQUMyQixNQUFYLEVBQW1CM0IsU0FBUyxDQUFDNEIsSUFBN0IsQ0FBcEIsQ0FaWjs7QUFjRTtBQUNGO0FBQ0E7QUFDRVQsRUFBQUEsTUFBTSxFQUFFbkIsU0FBUyxDQUFDMkIsTUFqQnBCOztBQW1CRTtBQUNGO0FBQ0E7QUFDQTtBQUNFVCxFQUFBQSxPQUFPLEVBQUVsQixTQUFTLENBQUM2QixJQXZCckI7O0FBeUJFO0FBQ0Y7QUFDQTtBQUNFVCxFQUFBQSxJQUFJLEVBQUVwQixTQUFTLENBQUM4QjtBQTVCbEI7QUErQkEsZUFBZWpCLFdBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgbWVtbywgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyBzcGFjaW5nLCBkaW1lbnNpb25zLCBwb3NpdGlvbiwgbGF5b3V0IH0gZnJvbSAndWktYm94J1xuaW1wb3J0IHsgdXNlU3R5bGVDb25maWcgfSBmcm9tICcuLi8uLi9ob29rcydcbmltcG9ydCB7IFBhbmUgfSBmcm9tICcuLi8uLi9sYXllcnMnXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vdHlwb2dyYXBoeSdcbmltcG9ydCB7IGdldEljb25Gb3JJbnRlbnQgfSBmcm9tICcuL2dldEljb25Gb3JJbnRlbnQnXG5cbmNvbnN0IHBzZXVkb1NlbGVjdG9ycyA9IHt9XG5cbmNvbnN0IGludGVybmFsU3R5bGVzID0ge1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInXG59XG5cbmNvbnN0IElubGluZUFsZXJ0ID0gbWVtbyhcbiAgZm9yd2FyZFJlZihmdW5jdGlvbiBJbmxpbmVBbGVydChwcm9wcywgcmVmKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBoYXNJY29uID0gdHJ1ZSwgaW50ZW50ID0gJ2luZm8nLCBzaXplID0gNDAwLCAuLi5yZXN0UHJvcHMgfSA9IHByb3BzXG5cbiAgICBjb25zdCBpbnRlbnRUb2tlbiA9IGludGVudCA9PT0gJ25vbmUnID8gJ2luZm8nIDogaW50ZW50XG4gICAgY29uc3QgeyBjbGFzc05hbWU6IHRoZW1lZENsYXNzTmFtZSwgLi4uc3R5bGVQcm9wcyB9ID0gdXNlU3R5bGVDb25maWcoXG4gICAgICAnSW5saW5lQWxlcnQnLFxuICAgICAgeyBpbnRlbnQ6IGludGVudFRva2VuIH0sXG4gICAgICBwc2V1ZG9TZWxlY3RvcnMsXG4gICAgICBpbnRlcm5hbFN0eWxlc1xuICAgIClcblxuICAgIHJldHVybiAoXG4gICAgICA8UGFuZSByZWY9e3JlZn0gY2xhc3NOYW1lPXtjeChjbGFzc05hbWUsIHRoZW1lZENsYXNzTmFtZSl9IHsuLi5zdHlsZVByb3BzfSB7Li4ucmVzdFByb3BzfT5cbiAgICAgICAge2hhc0ljb24gJiYgKFxuICAgICAgICAgIDxQYW5lIGRpc3BsYXk9XCJmbGV4XCIgbWFyZ2luUmlnaHQ9ezE2fT5cbiAgICAgICAgICAgIHtnZXRJY29uRm9ySW50ZW50KGludGVudCwgeyBzaXplOiAxNiB9KX1cbiAgICAgICAgICA8L1BhbmU+XG4gICAgICAgICl9XG4gICAgICAgIDxUZXh0IHNpemU9e3NpemV9IGxpbmVIZWlnaHQ9ezF9IGZvbnRXZWlnaHQ9ezUwMH0gY29sb3I9XCJpbmhlcml0XCI+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L1RleHQ+XG4gICAgICA8L1BhbmU+XG4gICAgKVxuICB9KVxuKVxuXG5JbmxpbmVBbGVydC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBDb21wb3NlcyBzb21lIEJveCBBUElzLlxuICAgKi9cbiAgLi4uc3BhY2luZy5wcm9wVHlwZXMsXG4gIC4uLnBvc2l0aW9uLnByb3BUeXBlcyxcbiAgLi4ubGF5b3V0LnByb3BUeXBlcyxcbiAgLi4uZGltZW5zaW9ucy5wcm9wVHlwZXMsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBhbGVydC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubm9kZV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgaW50ZW50IG9mIHRoZSBhbGVydC4gVGhpcyBzaG91bGQgYWx3YXlzIGJlIHNldCBleHBsaWNpdGx5LlxuICAgKi9cbiAgaW50ZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIHNob3cgYSBpY29uIG9uIHRoZSBsZWZ0IG1hdGNoaW5nIHRoZSB0eXBlLlxuICAgKiBUaGVyZSBpcyBubyBwb2ludCBub3Qgc2hvd2luZyB0aGlzLlxuICAgKi9cbiAgaGFzSWNvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBUZXh0LlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm51bWJlclxufVxuXG5leHBvcnQgZGVmYXVsdCBJbmxpbmVBbGVydFxuIl19