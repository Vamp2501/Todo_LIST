import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
var _excluded = ["description", "id"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { memo, useState } from 'react';
import { css } from 'glamor';
import PropTypes from 'prop-types';
import { StackingOrder } from '../../constants';
import Toast from './Toast';
var wrapperClass = css({
  maxWidth: 560,
  margin: '0 auto',
  top: 0,
  left: 0,
  right: 0,
  position: 'fixed',
  zIndex: StackingOrder.TOASTER,
  pointerEvents: 'none'
});

var hasCustomId = function hasCustomId(settings) {
  return Object.hasOwnProperty.call(settings, 'id');
};

var ToastManager = /*#__PURE__*/memo(function ToastManager(props) {
  var bindCloseAll = props.bindCloseAll,
      bindGetToasts = props.bindGetToasts,
      bindNotify = props.bindNotify,
      bindRemove = props.bindRemove;

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      toasts = _useState2[0],
      setToasts = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      idCounter = _useState4[0],
      setIdCounter = _useState4[1];

  var getToasts = function getToasts() {
    return toasts;
  };

  var closeAll = function closeAll() {
    setToasts(toasts.map(function (toast) {
      return _objectSpread(_objectSpread({}, toast), {}, {
        isShown: false
      });
    }));
  };
  /**
   * This will set isShown on the Toast which will close the toast.
   * It won't remove the toast until onExited triggers onRemove.
   */


  var closeToast = function closeToast(id) {
    setToasts(toasts.map(function (toast) {
      if (toast.id === id) {
        return _objectSpread(_objectSpread({}, toast), {}, {
          isShown: false
        });
      }

      return toast;
    }));
  };

  var safeCloseToast = function safeCloseToast(id) {
    var toastToRemove = toasts.find(function (toast) {
      return String(toast.id).startsWith(id);
    });

    if (toastToRemove) {
      closeToast(toastToRemove.id);
    }
  };

  var removeToast = function removeToast(id) {
    var updatedToasts = toasts.filter(function (toast) {
      return !String(toast.id).startsWith(id);
    });
    setToasts(updatedToasts);
    return updatedToasts;
  };

  var createToastInstance = function createToastInstance(title, settings) {
    var _settings$hasCloseBut;

    var uniqueId = idCounter;
    setIdCounter(idCounter + 1);
    var id = hasCustomId(settings) ? "".concat(settings.id, "-").concat(uniqueId) : uniqueId;
    return {
      id: id,
      title: title,
      description: settings.description,
      hasCloseButton: (_settings$hasCloseBut = settings.hasCloseButton) !== null && _settings$hasCloseBut !== void 0 ? _settings$hasCloseBut : true,
      duration: settings.duration || 5,
      close: function close() {
        return safeCloseToast(id);
      },
      intent: settings.intent
    };
  };

  var notify = function notify(title, settings) {
    var tempToasts = toasts;

    if (hasCustomId(settings)) {
      tempToasts = removeToast(settings.id);
    }

    var instance = createToastInstance(title, settings);
    setToasts([instance].concat(_toConsumableArray(tempToasts)));
  };

  bindNotify(notify);
  bindRemove(safeCloseToast);
  bindGetToasts(getToasts);
  bindCloseAll(closeAll);
  return /*#__PURE__*/React.createElement("span", {
    className: wrapperClass
  }, toasts.map(function (_ref) {
    var description = _ref.description,
        id = _ref.id,
        rest = _objectWithoutProperties(_ref, _excluded);

    return /*#__PURE__*/React.createElement(Toast, _extends({
      key: id,
      onRemove: function onRemove() {
        return removeToast(id);
      }
    }, rest), description);
  }));
});
ToastManager.propTypes = {
  /**
   * Function called with the `this.notify` function.
   */
  bindNotify: PropTypes.func.isRequired,

  /**
   * Function called with the `this.remove` function.
   */
  bindRemove: PropTypes.func.isRequired,

  /**
   * Function called with the `this.getToasts` function.
   */
  bindGetToasts: PropTypes.func.isRequired,

  /**
   * Function called with the `this.closeAll` function.
   */
  bindCloseAll: PropTypes.func.isRequired
};
export default ToastManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90b2FzdGVyL3NyYy9Ub2FzdE1hbmFnZXIuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJtZW1vIiwidXNlU3RhdGUiLCJjc3MiLCJQcm9wVHlwZXMiLCJTdGFja2luZ09yZGVyIiwiVG9hc3QiLCJ3cmFwcGVyQ2xhc3MiLCJtYXhXaWR0aCIsIm1hcmdpbiIsInRvcCIsImxlZnQiLCJyaWdodCIsInBvc2l0aW9uIiwiekluZGV4IiwiVE9BU1RFUiIsInBvaW50ZXJFdmVudHMiLCJoYXNDdXN0b21JZCIsInNldHRpbmdzIiwiT2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiVG9hc3RNYW5hZ2VyIiwicHJvcHMiLCJiaW5kQ2xvc2VBbGwiLCJiaW5kR2V0VG9hc3RzIiwiYmluZE5vdGlmeSIsImJpbmRSZW1vdmUiLCJ0b2FzdHMiLCJzZXRUb2FzdHMiLCJpZENvdW50ZXIiLCJzZXRJZENvdW50ZXIiLCJnZXRUb2FzdHMiLCJjbG9zZUFsbCIsIm1hcCIsInRvYXN0IiwiaXNTaG93biIsImNsb3NlVG9hc3QiLCJpZCIsInNhZmVDbG9zZVRvYXN0IiwidG9hc3RUb1JlbW92ZSIsImZpbmQiLCJTdHJpbmciLCJzdGFydHNXaXRoIiwicmVtb3ZlVG9hc3QiLCJ1cGRhdGVkVG9hc3RzIiwiZmlsdGVyIiwiY3JlYXRlVG9hc3RJbnN0YW5jZSIsInRpdGxlIiwidW5pcXVlSWQiLCJkZXNjcmlwdGlvbiIsImhhc0Nsb3NlQnV0dG9uIiwiZHVyYXRpb24iLCJjbG9zZSIsImludGVudCIsIm5vdGlmeSIsInRlbXBUb2FzdHMiLCJpbnN0YW5jZSIsInJlc3QiLCJwcm9wVHlwZXMiLCJmdW5jIiwiaXNSZXF1aXJlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxJQUFoQixFQUFzQkMsUUFBdEIsUUFBc0MsT0FBdEM7QUFDQSxTQUFTQyxHQUFULFFBQW9CLFFBQXBCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZ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ZXZDLFlBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgbWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcidcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IFN0YWNraW5nT3JkZXIgfSBmcm9tICcuLi8uLi9jb25zdGFudHMnXG5pbXBvcnQgVG9hc3QgZnJvbSAnLi9Ub2FzdCdcblxuY29uc3Qgd3JhcHBlckNsYXNzID0gY3NzKHtcbiAgbWF4V2lkdGg6IDU2MCxcbiAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICByaWdodDogMCxcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIHpJbmRleDogU3RhY2tpbmdPcmRlci5UT0FTVEVSLFxuICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbn0pXG5cbmNvbnN0IGhhc0N1c3RvbUlkID0gc2V0dGluZ3MgPT4gT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoc2V0dGluZ3MsICdpZCcpXG5cbmNvbnN0IFRvYXN0TWFuYWdlciA9IG1lbW8oZnVuY3Rpb24gVG9hc3RNYW5hZ2VyKHByb3BzKSB7XG4gIGNvbnN0IHsgYmluZENsb3NlQWxsLCBiaW5kR2V0VG9hc3RzLCBiaW5kTm90aWZ5LCBiaW5kUmVtb3ZlIH0gPSBwcm9wc1xuXG4gIGNvbnN0IFt0b2FzdHMsIHNldFRvYXN0c10gPSB1c2VTdGF0ZShbXSlcbiAgY29uc3QgW2lkQ291bnRlciwgc2V0SWRDb3VudGVyXSA9IHVzZVN0YXRlKDApXG5cbiAgY29uc3QgZ2V0VG9hc3RzID0gKCkgPT4gdG9hc3RzXG5cbiAgY29uc3QgY2xvc2VBbGwgPSAoKSA9PiB7XG4gICAgc2V0VG9hc3RzKHRvYXN0cy5tYXAodG9hc3QgPT4gKHsgLi4udG9hc3QsIGlzU2hvd246IGZhbHNlIH0pKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHdpbGwgc2V0IGlzU2hvd24gb24gdGhlIFRvYXN0IHdoaWNoIHdpbGwgY2xvc2UgdGhlIHRvYXN0LlxuICAgKiBJdCB3b24ndCByZW1vdmUgdGhlIHRvYXN0IHVudGlsIG9uRXhpdGVkIHRyaWdnZXJzIG9uUmVtb3ZlLlxuICAgKi9cbiAgY29uc3QgY2xvc2VUb2FzdCA9IGlkID0+IHtcbiAgICBzZXRUb2FzdHMoXG4gICAgICB0b2FzdHMubWFwKHRvYXN0ID0+IHtcbiAgICAgICAgaWYgKHRvYXN0LmlkID09PSBpZCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi50b2FzdCxcbiAgICAgICAgICAgIGlzU2hvd246IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvYXN0XG4gICAgICB9KVxuICAgIClcbiAgfVxuXG4gIGNvbnN0IHNhZmVDbG9zZVRvYXN0ID0gaWQgPT4ge1xuICAgIGNvbnN0IHRvYXN0VG9SZW1vdmUgPSB0b2FzdHMuZmluZCh0b2FzdCA9PiBTdHJpbmcodG9hc3QuaWQpLnN0YXJ0c1dpdGgoaWQpKVxuXG4gICAgaWYgKHRvYXN0VG9SZW1vdmUpIHtcbiAgICAgIGNsb3NlVG9hc3QodG9hc3RUb1JlbW92ZS5pZClcbiAgICB9XG4gIH1cblxuICBjb25zdCByZW1vdmVUb2FzdCA9IGlkID0+IHtcbiAgICBjb25zdCB1cGRhdGVkVG9hc3RzID0gdG9hc3RzLmZpbHRlcih0b2FzdCA9PiAhU3RyaW5nKHRvYXN0LmlkKS5zdGFydHNXaXRoKGlkKSlcbiAgICBzZXRUb2FzdHModXBkYXRlZFRvYXN0cylcbiAgICByZXR1cm4gdXBkYXRlZFRvYXN0c1xuICB9XG5cbiAgY29uc3QgY3JlYXRlVG9hc3RJbnN0YW5jZSA9ICh0aXRsZSwgc2V0dGluZ3MpID0+IHtcbiAgICBjb25zdCB1bmlxdWVJZCA9IGlkQ291bnRlclxuICAgIHNldElkQ291bnRlcihpZENvdW50ZXIgKyAxKVxuICAgIGNvbnN0IGlkID0gaGFzQ3VzdG9tSWQoc2V0dGluZ3MpID8gYCR7c2V0dGluZ3MuaWR9LSR7dW5pcXVlSWR9YCA6IHVuaXF1ZUlkXG5cbiAgICByZXR1cm4ge1xuICAgICAgaWQsXG4gICAgICB0aXRsZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBzZXR0aW5ncy5kZXNjcmlwdGlvbixcbiAgICAgIGhhc0Nsb3NlQnV0dG9uOiBzZXR0aW5ncy5oYXNDbG9zZUJ1dHRvbiA/PyB0cnVlLFxuICAgICAgZHVyYXRpb246IHNldHRpbmdzLmR1cmF0aW9uIHx8IDUsXG4gICAgICBjbG9zZTogKCkgPT4gc2FmZUNsb3NlVG9hc3QoaWQpLFxuICAgICAgaW50ZW50OiBzZXR0aW5ncy5pbnRlbnRcbiAgICB9XG4gIH1cblxuICBjb25zdCBub3RpZnkgPSAodGl0bGUsIHNldHRpbmdzKSA9PiB7XG4gICAgbGV0IHRlbXBUb2FzdHMgPSB0b2FzdHNcbiAgICBpZiAoaGFzQ3VzdG9tSWQoc2V0dGluZ3MpKSB7XG4gICAgICB0ZW1wVG9hc3RzID0gcmVtb3ZlVG9hc3Qoc2V0dGluZ3MuaWQpXG4gICAgfVxuXG4gICAgY29uc3QgaW5zdGFuY2UgPSBjcmVhdGVUb2FzdEluc3RhbmNlKHRpdGxlLCBzZXR0aW5ncylcbiAgICBzZXRUb2FzdHMoW2luc3RhbmNlLCAuLi50ZW1wVG9hc3RzXSlcbiAgfVxuXG4gIGJpbmROb3RpZnkobm90aWZ5KVxuICBiaW5kUmVtb3ZlKHNhZmVDbG9zZVRvYXN0KVxuICBiaW5kR2V0VG9hc3RzKGdldFRvYXN0cylcbiAgYmluZENsb3NlQWxsKGNsb3NlQWxsKVxuXG4gIHJldHVybiAoXG4gICAgPHNwYW4gY2xhc3NOYW1lPXt3cmFwcGVyQ2xhc3N9PlxuICAgICAge3RvYXN0cy5tYXAoKHsgZGVzY3JpcHRpb24sIGlkLCAuLi5yZXN0IH0pID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8VG9hc3Qga2V5PXtpZH0gb25SZW1vdmU9eygpID0+IHJlbW92ZVRvYXN0KGlkKX0gey4uLnJlc3R9PlxuICAgICAgICAgICAge2Rlc2NyaXB0aW9ufVxuICAgICAgICAgIDwvVG9hc3Q+XG4gICAgICAgIClcbiAgICAgIH0pfVxuICAgIDwvc3Bhbj5cbiAgKVxufSlcblxuVG9hc3RNYW5hZ2VyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIGNhbGxlZCB3aXRoIHRoZSBgdGhpcy5ub3RpZnlgIGZ1bmN0aW9uLlxuICAgKi9cbiAgYmluZE5vdGlmeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogRnVuY3Rpb24gY2FsbGVkIHdpdGggdGhlIGB0aGlzLnJlbW92ZWAgZnVuY3Rpb24uXG4gICAqL1xuICBiaW5kUmVtb3ZlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiBjYWxsZWQgd2l0aCB0aGUgYHRoaXMuZ2V0VG9hc3RzYCBmdW5jdGlvbi5cbiAgICovXG4gIGJpbmRHZXRUb2FzdHM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIGNhbGxlZCB3aXRoIHRoZSBgdGhpcy5jbG9zZUFsbGAgZnVuY3Rpb24uXG4gICAqL1xuICBiaW5kQ2xvc2VBbGw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgVG9hc3RNYW5hZ2VyXG4iXX0=