import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import Checkbox from '../src/Checkbox';
describe('Checkbox', function () {
  it('should not crash when rendering', function () {
    expect(function () {
      render( /*#__PURE__*/React.createElement(Checkbox, null));
    }).not.toThrowError();
  });
  it('should render', function () {
    expect(function () {
      render( /*#__PURE__*/React.createElement(Checkbox, null));
    }).not.toBeNull();
  });
  it('should render with an id', function () {
    render( /*#__PURE__*/React.createElement(Checkbox, {
      id: "test-123"
    }));
    expect(screen.getByRole('checkbox').getAttribute('id')).toEqual('test-123');
  });
  it('should render with a name', function () {
    render( /*#__PURE__*/React.createElement(Checkbox, {
      name: "test-name"
    }));
    expect(screen.getByRole('checkbox').getAttribute('name')).toEqual('test-name');
  });
  it('should render label with no checked', function () {
    render( /*#__PURE__*/React.createElement(Checkbox, {
      label: "Check me"
    }));
    expect(screen.getByText('Check me')).toBeVisible();
    expect(screen.getByRole('checkbox').checked).toBeFalsy();
  });
  it('should be in indeterminate state', function () {
    render( /*#__PURE__*/React.createElement(Checkbox, {
      indeterminate: true
    }));
    expect(screen.getByRole('checkbox').indeterminate).toBeTruthy();
  });
  it('should be in checked state', function () {
    render( /*#__PURE__*/React.createElement(Checkbox, {
      checked: true
    }));
    expect(screen.getByRole('checkbox').checked).toBeTruthy();
  });
  it('should be disable when disabled is true', function () {
    render( /*#__PURE__*/React.createElement(Checkbox, {
      disabled: true
    }));
    expect(screen.getByRole('checkbox').disabled).toBeTruthy();
  });
  it('should check and uncheck checkbox when clicked', function () {
    function ControlledCheckbox() {
      var _React$useState = React.useState(false),
          _React$useState2 = _slicedToArray(_React$useState, 2),
          checked = _React$useState2[0],
          setChecked = _React$useState2[1];

      return /*#__PURE__*/React.createElement(Checkbox, {
        checked: checked,
        onChange: function onChange(e) {
          setChecked(e.target.checked);
        }
      });
    }

    render( /*#__PURE__*/React.createElement(ControlledCheckbox, null));
    var checkbox = screen.getByRole('checkbox');
    expect(screen.getByRole('checkbox').checked).toBeFalsy();
    fireEvent.click(checkbox);
    expect(screen.getByRole('checkbox').checked).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jaGVja2JveC9fX3Rlc3RzX18vQ2hlY2tib3gudGVzdC5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsInNjcmVlbiIsImZpcmVFdmVudCIsIkNoZWNrYm94IiwiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsIm5vdCIsInRvVGhyb3dFcnJvciIsInRvQmVOdWxsIiwiZ2V0QnlSb2xlIiwiZ2V0QXR0cmlidXRlIiwidG9FcXVhbCIsImdldEJ5VGV4dCIsInRvQmVWaXNpYmxlIiwiY2hlY2tlZCIsInRvQmVGYWxzeSIsImluZGV0ZXJtaW5hdGUiLCJ0b0JlVHJ1dGh5IiwiZGlzYWJsZWQiLCJDb250cm9sbGVkQ2hlY2tib3giLCJ1c2VTdGF0ZSIsInNldENoZWNrZWQiLCJlIiwidGFyZ2V0IiwiY2hlY2tib3giLCJjbGljayJdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxTQUFTQyxNQUFULEVBQWlCQyxNQUFqQixFQUF5QkMsU0FBekIsUUFBMEMsd0JBQTFDO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQixpQkFBckI7QUFFQUMsUUFBUSxDQUFDLFVBQUQsRUFBYSxZQUFNO0FBQ3pCQyxFQUFBQSxFQUFFLENBQUMsaUNBQUQsRUFBb0MsWUFBTTtBQUMxQ0MsSUFBQUEsTUFBTSxDQUFDLFlBQU07QUFDWE4sTUFBQUEsTUFBTSxlQUFDLG9CQUFDLFFBQUQsT0FBRCxDQUFOO0FBQ0QsS0FGSyxDQUFOLENBRUdPLEdBRkgsQ0FFT0MsWUFGUDtBQUdELEdBSkMsQ0FBRjtBQU1BSCxFQUFBQSxFQUFFLENBQUMsZUFBRCxFQUFrQixZQUFNO0FBQ3hCQyxJQUFBQSxNQUFNLENBQUMsWUFBTTtBQUNYTixNQUFBQSxNQUFNLGVBQUMsb0JBQUMsUUFBRCxPQUFELENBQU47QUFDRCxLQUZLLENBQU4sQ0FFR08sR0FGSCxDQUVPRSxRQUZQO0FBR0QsR0FKQyxDQUFGO0FBTUFKLEVBQUFBLEVBQUUsQ0FBQywwQkFB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OUIsQ0FBTixDQUE2Q0MsU0FBN0M7QUFDQWQsSUFBQUEsU0FBUyxDQUFDd0IsS0FBVixDQUFnQkQsUUFBaEI7QUFDQW5CLElBQUFBLE1BQU0sQ0FBQ0wsTUFBTSxDQUFDUyxTQUFQLENBQWlCLFVBQWpCLEVBQTZCSyxPQUE5QixDQUFOLENBQTZDRyxVQUE3QztBQUNELEdBakJDLENBQUY7QUFrQkQsQ0E5RE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0J1xuaW1wb3J0IENoZWNrYm94IGZyb20gJy4uL3NyYy9DaGVja2JveCdcblxuZGVzY3JpYmUoJ0NoZWNrYm94JywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIG5vdCBjcmFzaCB3aGVuIHJlbmRlcmluZycsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgcmVuZGVyKDxDaGVja2JveCAvPilcbiAgICB9KS5ub3QudG9UaHJvd0Vycm9yKClcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJlbmRlcicsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgcmVuZGVyKDxDaGVja2JveCAvPilcbiAgICB9KS5ub3QudG9CZU51bGwoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHdpdGggYW4gaWQnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxDaGVja2JveCBpZD1cInRlc3QtMTIzXCIgLz4pXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2NoZWNrYm94JykuZ2V0QXR0cmlidXRlKCdpZCcpKS50b0VxdWFsKCd0ZXN0LTEyMycpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgd2l0aCBhIG5hbWUnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxDaGVja2JveCBuYW1lPVwidGVzdC1uYW1lXCIgLz4pXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2NoZWNrYm94JykuZ2V0QXR0cmlidXRlKCduYW1lJykpLnRvRXF1YWwoJ3Rlc3QtbmFtZScpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgbGFiZWwgd2l0aCBubyBjaGVja2VkJywgKCkgPT4ge1xuICAgIHJlbmRlcig8Q2hlY2tib3ggbGFiZWw9XCJDaGVjayBtZVwiIC8+KVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdDaGVjayBtZScpKS50b0JlVmlzaWJsZSgpXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2NoZWNrYm94JykuY2hlY2tlZCkudG9CZUZhbHN5KClcbiAgfSlcblxuICBpdCgnc2hvdWxkIGJlIGluIGluZGV0ZXJtaW5hdGUgc3RhdGUnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxDaGVja2JveCBpbmRldGVybWluYXRlIC8+KVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdjaGVja2JveCcpLmluZGV0ZXJtaW5hdGUpLnRvQmVUcnV0aHkoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgYmUgaW4gY2hlY2tlZCBzdGF0ZScsICgpID0+IHtcbiAgICByZW5kZXIoPENoZWNrYm94IGNoZWNrZWQgLz4pXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2NoZWNrYm94JykuY2hlY2tlZCkudG9CZVRydXRoeSgpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBiZSBkaXNhYmxlIHdoZW4gZGlzYWJsZWQgaXMgdHJ1ZScsICgpID0+IHtcbiAgICByZW5kZXIoPENoZWNrYm94IGRpc2FibGVkIC8+KVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdjaGVja2JveCcpLmRpc2FibGVkKS50b0JlVHJ1dGh5KClcbiAgfSlcblxuICBpdCgnc2hvdWxkIGNoZWNrIGFuZCB1bmNoZWNrIGNoZWNrYm94IHdoZW4gY2xpY2tlZCcsICgpID0+IHtcbiAgICBmdW5jdGlvbiBDb250cm9sbGVkQ2hlY2tib3goKSB7XG4gICAgICBjb25zdCBbY2hlY2tlZCwgc2V0Q2hlY2tlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSlcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxDaGVja2JveFxuICAgICAgICAgIGNoZWNrZWQ9e2NoZWNrZWR9XG4gICAgICAgICAgb25DaGFuZ2U9e2UgPT4ge1xuICAgICAgICAgICAgc2V0Q2hlY2tlZChlLnRhcmdldC5jaGVja2VkKVxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICApXG4gICAgfVxuICAgIHJlbmRlcig8Q29udHJvbGxlZENoZWNrYm94IC8+KVxuICAgIGNvbnN0IGNoZWNrYm94ID0gc2NyZWVuLmdldEJ5Um9sZSgnY2hlY2tib3gnKVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdjaGVja2JveCcpLmNoZWNrZWQpLnRvQmVGYWxzeSgpXG4gICAgZmlyZUV2ZW50LmNsaWNrKGNoZWNrYm94KVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdjaGVja2JveCcpLmNoZWNrZWQpLnRvQmVUcnV0aHkoKVxuICB9KVxufSlcbiJdfQ==