import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import preventBodyScroll from '../prevent-body-scroll';
describe('preventBodyScroll', function () {
  it('Should change body overflow to hidden on true and reset overflow on false', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            expect(document.body.style.overflow).toEqual('');
            preventBodyScroll(true);
            expect(document.body.style.overflow).toEqual('hidden');
            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual('');

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('Should be able to handle changes from other scripts changing body overflow', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // Repeat logic of first test
            expect(document.body.style.overflow).toEqual('');
            preventBodyScroll(true);
            expect(document.body.style.overflow).toEqual('hidden');
            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual(''); // Outside source changes overflow to hidden

            document.body.style.overflow = 'hidden'; // Restores 'hidden' as expected

            expect(document.body.style.overflow).toEqual('hidden');
            preventBodyScroll(true);
            expect(document.body.style.overflow).toEqual('hidden');
            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual('hidden'); // 'hidden' should no longer be apart of the history

            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual(''); // Outside source changes overflow to ''

            document.body.style.overflow = ''; // Repeat steps from first test to ensure it is not affected

            expect(document.body.style.overflow).toEqual('');
            preventBodyScroll(true);
            expect(document.body.style.overflow).toEqual('hidden');
            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual('');

          case 19:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('Should be able to restore multiple layers of overflow values', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            document.body.style.overflow = ''; // First overlay

            preventBodyScroll(true);
            expect(document.body.style.overflow).toEqual('hidden'); // Second overlay

            preventBodyScroll(true);
            expect(document.body.style.overflow).toEqual('hidden'); // Third overlay

            preventBodyScroll(true);
            expect(document.body.style.overflow).toEqual('hidden'); // Remove third overlay

            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual('hidden'); // Remove second overlay

            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual('hidden'); // Remove first overlay

            preventBodyScroll(false);
            expect(document.body.style.overflow).toEqual('');

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvX190ZXN0c19fL3ByZXZlbnQtYm9keS1zY3JvbGwudGVzdC5qcyJdLCJuYW1lcyI6WyJwcmV2ZW50Qm9keVNjcm9sbCIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJkb2N1bWVudCIsImJvZHkiLCJzdHlsZSIsIm92ZXJmbG93IiwidG9FcXVhbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPQSxpQkFBUCxNQUE4Qix3QkFBOUI7QUFFQUMsUUFBUSxDQUFDLG1CQUFELEVBQXNCLFlBQU07QUFDbENDLEVBQUFBLEVBQUUsQ0FBQywyRUFBRCx3RUFBOEU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUM5RUMsWUFBQUEsTUFBTSxDQUFDQyxRQUFRLENBQUNDLElBQVQsQ0FBY0MsS0FBZCxDQUFvQkMsUUFBckIsQ0FBTixDQUFxQ0MsT0FBckMsQ0FBNkMsRUFBN0M7QUFDQVIsWUFBQUEsaUJBQWlCLENBQUMsSUFBRCxDQUFqQjtBQUNBRyxZQUFBQSxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjQyxLQUFkLENBQW9CQyxRQUFyQixDQUFOLENBQXFDQyxPQUFyQyxDQUE2QyxRQUE3QztBQUNBUixZQUFBQSxpQkFBaUIsQ0FBQyxLQUFELENBQWpCO0FBQ0FHLFlBQUFBLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDQyxJQUFULENBQWNDLEtBQWQsQ0FBb0JDLFFBQXJCLENBQU4sQ0FBcUNDLE9BQXJDLENBQTZDLEVBQTdDOztBQUw4RTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUE5RSxHQUFGO0FBT0FOLEVBQUFBLEVBQUUsQ0FBQyw0RUFBRCx3RUFBK0U7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUMvRTtBQUNBQyxZQUFBQSxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjQyxLQUFkLENBQW9CQyxRQUFyQixDQUFOLENBQXFDQyxPQUFyQyxDQUE2QyxFQUE3QztBQUNBUixZQUFBQSxpQkFBaUIsQ0FBQyxJQUFELENB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QUFvQkMsUUFBckIsQ0FBTixDQUFxQ0MsT0FBckMsQ0FBNkMsUUFBN0MsRUFWaUUsQ0FZakU7O0FBQ0FSLFlBQUFBLGlCQUFpQixDQUFDLEtBQUQsQ0FBakI7QUFDQUcsWUFBQUEsTUFBTSxDQUFDQyxRQUFRLENBQUNDLElBQVQsQ0FBY0MsS0FBZCxDQUFvQkMsUUFBckIsQ0FBTixDQUFxQ0MsT0FBckMsQ0FBNkMsUUFBN0MsRUFkaUUsQ0FlakU7O0FBQ0FSLFlBQUFBLGlCQUFpQixDQUFDLEtBQUQsQ0FBakI7QUFDQUcsWUFBQUEsTUFBTSxDQUFDQyxRQUFRLENBQUNDLElBQVQsQ0FBY0MsS0FBZCxDQUFvQkMsUUFBckIsQ0FBTixDQUFxQ0MsT0FBckMsQ0FBNkMsUUFBN0MsRUFqQmlFLENBa0JqRTs7QUFDQVIsWUFBQUEsaUJBQWlCLENBQUMsS0FBRCxDQUFqQjtBQUNBRyxZQUFBQSxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjQyxLQUFkLENBQW9CQyxRQUFyQixDQUFOLENBQXFDQyxPQUFyQyxDQUE2QyxFQUE3Qzs7QUFwQmlFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQWpFLEdBQUY7QUFzQkQsQ0EzRE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwcmV2ZW50Qm9keVNjcm9sbCBmcm9tICcuLi9wcmV2ZW50LWJvZHktc2Nyb2xsJ1xuXG5kZXNjcmliZSgncHJldmVudEJvZHlTY3JvbGwnLCAoKSA9PiB7XG4gIGl0KCdTaG91bGQgY2hhbmdlIGJvZHkgb3ZlcmZsb3cgdG8gaGlkZGVuIG9uIHRydWUgYW5kIHJlc2V0IG92ZXJmbG93IG9uIGZhbHNlJywgYXN5bmMgKCkgPT4ge1xuICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93KS50b0VxdWFsKCcnKVxuICAgIHByZXZlbnRCb2R5U2Nyb2xsKHRydWUpXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvRXF1YWwoJ2hpZGRlbicpXG4gICAgcHJldmVudEJvZHlTY3JvbGwoZmFsc2UpXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvRXF1YWwoJycpXG4gIH0pXG4gIGl0KCdTaG91bGQgYmUgYWJsZSB0byBoYW5kbGUgY2hhbmdlcyBmcm9tIG90aGVyIHNjcmlwdHMgY2hhbmdpbmcgYm9keSBvdmVyZmxvdycsIGFzeW5jICgpID0+IHtcbiAgICAvLyBSZXBlYXQgbG9naWMgb2YgZmlyc3QgdGVzdFxuICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93KS50b0VxdWFsKCcnKVxuICAgIHByZXZlbnRCb2R5U2Nyb2xsKHRydWUpXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvRXF1YWwoJ2hpZGRlbicpXG4gICAgcHJldmVudEJvZHlTY3JvbGwoZmFsc2UpXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvRXF1YWwoJycpXG5cbiAgICAvLyBPdXRzaWRlIHNvdXJjZSBjaGFuZ2VzIG92ZXJmbG93IHRvIGhpZGRlblxuICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJ1xuICAgIC8vIFJlc3RvcmVzICdoaWRkZW4nIGFzIGV4cGVjdGVkXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvRXF1YWwoJ2hpZGRlbicpXG4gICAgcHJldmVudEJvZHlTY3JvbGwodHJ1ZSlcbiAgICBleHBlY3QoZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdykudG9FcXVhbCgnaGlkZGVuJylcbiAgICBwcmV2ZW50Qm9keVNjcm9sbChmYWxzZSlcbiAgICBleHBlY3QoZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdykudG9FcXVhbCgnaGlkZGVuJylcbiAgICAvLyAnaGlkZGVuJyBzaG91bGQgbm8gbG9uZ2VyIGJlIGFwYXJ0IG9mIHRoZSBoaXN0b3J5XG4gICAgcHJldmVudEJvZHlTY3JvbGwoZmFsc2UpXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvRXF1YWwoJycpXG5cbiAgICAvLyBPdXRzaWRlIHNvdXJjZSBjaGFuZ2VzIG92ZXJmbG93IHRvICcnXG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICcnXG4gICAgLy8gUmVwZWF0IHN0ZXBzIGZyb20gZmlyc3QgdGVzdCB0byBlbnN1cmUgaXQgaXMgbm90IGFmZmVjdGVkXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvRXF1YWwoJycpXG4gICAgcHJldmVudEJvZHlTY3JvbGwodHJ1ZSlcbiAgICBleHBlY3QoZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdykudG9FcXVhbCgnaGlkZGVuJylcbiAgICBwcmV2ZW50Qm9keVNjcm9sbChmYWxzZSlcbiAgICBleHBlY3QoZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdykudG9FcXVhbCgnJylcbiAgfSlcbiAgaXQoJ1Nob3VsZCBiZSBhYmxlIHRvIHJlc3RvcmUgbXVsdGlwbGUgbGF5ZXJzIG9mIG92ZXJmbG93IHZhbHVlcycsIGFzeW5jICgpID0+IHtcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gJydcbiAgICAvLyBGaXJzdCBvdmVybGF5XG4gICAgcHJldmVudEJvZHlTY3JvbGwodHJ1ZSlcbiAgICBleHBlY3QoZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdykudG9FcXVhbCgnaGlkZGVuJylcbiAgICAvLyBTZWNvbmQgb3ZlcmxheVxuICAgIHByZXZlbnRCb2R5U2Nyb2xsKHRydWUpXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvRXF1YWwoJ2hpZGRlbicpXG4gICAgLy8gVGhpcmQgb3ZlcmxheVxuICAgIHByZXZlbnRCb2R5U2Nyb2xsKHRydWUpXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvRXF1YWwoJ2hpZGRlbicpXG5cbiAgICAvLyBSZW1vdmUgdGhpcmQgb3ZlcmxheVxuICAgIHByZXZlbnRCb2R5U2Nyb2xsKGZhbHNlKVxuICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93KS50b0VxdWFsKCdoaWRkZW4nKVxuICAgIC8vIFJlbW92ZSBzZWNvbmQgb3ZlcmxheVxuICAgIHByZXZlbnRCb2R5U2Nyb2xsKGZhbHNlKVxuICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93KS50b0VxdWFsKCdoaWRkZW4nKVxuICAgIC8vIFJlbW92ZSBmaXJzdCBvdmVybGF5XG4gICAgcHJldmVudEJvZHlTY3JvbGwoZmFsc2UpXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvRXF1YWwoJycpXG4gIH0pXG59KVxuIl19