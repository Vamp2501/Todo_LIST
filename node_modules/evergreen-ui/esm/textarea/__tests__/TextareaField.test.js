import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import faker from 'faker';
import { TextareaField } from '..';

var makeTextareaFieldFixture = function makeTextareaFieldFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/React.createElement(TextareaField, _extends({
    "data-testid": "TextareaField",
    label: "TextareaField"
  }, props));
};

makeTextareaFieldFixture.displayName = "makeTextareaFieldFixture";
describe('TextareaField', function () {
  it('Should render', function () {
    expect(function () {
      return render(makeTextareaFieldFixture());
    }).not.toThrow();
  });
  describe('FormField props', function () {
    test('Should render label when provided', function () {
      var expected = faker.random.alphaNumeric();
      render(makeTextareaFieldFixture({
        label: expected
      }));
      expect(screen.getByLabelText(expected)).toBeInTheDocument();
    });
    test('Should render asterisk when required is true', function () {
      var label = faker.random.alphaNumeric();
      var expected = "".concat(label, " *");
      render(makeTextareaFieldFixture({
        label: label,
        required: true
      }));
      expect(screen.getByLabelText(expected)).toBeInTheDocument();
    });
    test('Should render hint when provided', function () {
      var expected = faker.random.alphaNumeric();
      render(makeTextareaFieldFixture({
        hint: expected
      }));
      expect(screen.getByText(expected)).toBeInTheDocument();
    });
    test('Should render description when provided', function () {
      var expected = faker.random.alphaNumeric();
      render(makeTextareaFieldFixture({
        description: expected
      }));
      expect(screen.getByText(expected)).toBeInTheDocument();
    });
    test('Should render validationMessage when provided', function () {
      var expected = faker.random.alphaNumeric();
      render(makeTextareaFieldFixture({
        validationMessage: expected
      }));
      expect(screen.getByText(expected)).toBeInTheDocument();
    });
    test('Should render label with `for` attribute for accessibility', function () {
      var _render = render(makeTextareaFieldFixture({
        label: faker.random.alphaNumeric()
      })),
          container = _render.container;

      var textarea = container.querySelector('textarea');
      var label = container.querySelector('label');
      expect(label).toHaveAttribute('for', textarea.id);
    });
  });
  describe('Textarea props', function () {
    it('Should be disabled when disabled is true', function () {
      var _render2 = render(makeTextareaFieldFixture({
        disabled: true
      })),
          container = _render2.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toBeDisabled();
    });
    it.each([undefined, null, false])('Should not be disabled when disabled is %p', function (disabled) {
      var _render3 = render(makeTextareaFieldFixture({
        disabled: disabled
      })),
          container = _render3.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).not.toBeDisabled();
    });
    it('Should be required when required is true', function () {
      var _render4 = render(makeTextareaFieldFixture({
        required: true
      })),
          container = _render4.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toBeRequired();
    });
    it.each([undefined, null, false])('Should not be required when required is %p', function (required) {
      var _render5 = render(makeTextareaFieldFixture({
        required: required
      })),
          container = _render5.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).not.toBeRequired();
    });
    it('Should render with placeholder when placeholder provided', function () {
      var expected = faker.random.alphaNumeric();

      var _render6 = render(makeTextareaFieldFixture({
        placeholder: expected
      })),
          container = _render6.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toHaveAttribute('placeholder', expected);
    });
    it('Should pass through `spellCheck` prop to textarea', function () {
      var expected = faker.datatype["boolean"]();

      var _render7 = render(makeTextareaFieldFixture({
        spellCheck: expected
      })),
          container = _render7.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toHaveAttribute('spellCheck', expected.toString());
    });
    it('Should render with `aria-invalid` when isInvalid provided', function () {
      var expected = faker.datatype["boolean"]();

      var _render8 = render(makeTextareaFieldFixture({
        isInvalid: expected
      })),
          container = _render8.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toHaveAttribute('aria-invalid', expected.toString());
    });
    it('Should render with `data-gramm_editor` when grammarly provided', function () {
      var expected = faker.datatype["boolean"]();

      var _render9 = render(makeTextareaFieldFixture({
        grammarly: expected
      })),
          container = _render9.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toHaveAttribute('data-gramm_editor', expected.toString());
    });
    it('Should pass through `inputWidth` prop to textarea', function () {
      var expected = faker.datatype.number({
        min: 10,
        max: 100
      });

      var _render10 = render(makeTextareaFieldFixture({
        inputWidth: expected
      })),
          container = _render10.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toHaveStyle({
        width: "".concat(expected, "px")
      });
    });
    it('Should pass through `inputHeight` prop to textarea', function () {
      var expected = faker.datatype.number({
        min: 10,
        max: 100
      });

      var _render11 = render(makeTextareaFieldFixture({
        inputHeight: expected
      })),
          container = _render11.container;

      var textarea = container.querySelector('textarea');
      expect(textarea).toHaveStyle({
        height: "".concat(expected, "px")
      });
    });
    it('Should call onChange when event is fired', function () {
      var onChange = jest.fn();

      var _render12 = render(makeTextareaFieldFixture({
        onChange: onChange
      })),
          container = _render12.container;

      var textarea = container.querySelector('textarea');
      fireEvent.change(textarea, {
        target: {
          value: 'test'
        }
      });
      expect(onChange).toHaveBeenCalled();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,